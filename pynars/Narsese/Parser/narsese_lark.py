# The file was automatically generated by Lark v0.12.0
__version__ = "0.12.0"

#
#
#   Lark Stand-alone Generator Tool
# ----------------------------------
# Generates a stand-alone LALR(1) parser with a standard lexer
#
# Git:    https://github.com/erezsh/lark
# Author: Erez Shinan (erezshin@gmail.com)
#
#
#    >>> LICENSE
#
#    This tool and its generated code use a separate license from Lark,
#    and are subject to the terms of the Mozilla Public License, v. 2.0.
#    If a copy of the MPL was not distributed with this
#    file, You can obtain one at https://mozilla.org/MPL/2.0/.
#
#    If you wish to purchase a commercial license for this tool and its
#    generated code, you may contact me via email or otherwise.
#
#    If MPL2 is incompatible with your free or open-source project,
#    contact me and we'll work it out.
#
#

from io import open



class LarkError(Exception):
    pass


class ConfigurationError(LarkError, ValueError):
    pass


def assert_config(value, options, msg='Got %r, expected one of %s'):
    if value not in options:
        raise ConfigurationError(msg % (value, options))


class GrammarError(LarkError):
    pass


class ParseError(LarkError):
    pass


class LexError(LarkError):
    pass


class UnexpectedInput(LarkError):
    #--
    pos_in_stream = None
    _terminals_by_name = None

    def get_context(self, text, span=40):
        #--
        assert self.pos_in_stream is not None, self
        pos = self.pos_in_stream
        start = max(pos - span, 0)
        end = pos + span
        if not isinstance(text, bytes):
            before = text[start:pos].rsplit('\n', 1)[-1]
            after = text[pos:end].split('\n', 1)[0]
            return before + after + '\n' + ' ' * len(before.expandtabs()) + '^\n'
        else:
            before = text[start:pos].rsplit(b'\n', 1)[-1]
            after = text[pos:end].split(b'\n', 1)[0]
            return (before + after + b'\n' + b' ' * len(before.expandtabs()) + b'^\n').decode("ascii", "backslashreplace")

    def match_examples(self, parse_fn, examples, token_type_match_fallback=False, use_accepts=False):
        #--
        assert self.state is not None, "Not supported for this exception"

        if isinstance(examples, dict):
            examples = examples.items()

        candidate = (None, False)
        for i, (label, example) in enumerate(examples):
            assert not isinstance(example, STRING_TYPE)

            for j, malformed in enumerate(example):
                try:
                    parse_fn(malformed)
                except UnexpectedInput as ut:
                    if ut.state == self.state:
                        if use_accepts and hasattr(self, 'accepts') and ut.accepts != self.accepts:
                            logger.debug("Different accepts with same state[%d]: %s != %s at example [%s][%s]" %
                                         (self.state, self.accepts, ut.accepts, i, j))
                            continue
                        try:
                            if ut.token == self.token:  ##

                                logger.debug("Exact Match at example [%s][%s]" % (i, j))
                                return label

                            if token_type_match_fallback:
                                ##

                                if (ut.token.type == self.token.type) and not candidate[-1]:
                                    logger.debug("Token Type Fallback at example [%s][%s]" % (i, j))
                                    candidate = label, True

                        except AttributeError:
                            pass
                        if candidate[0] is None:
                            logger.debug("Same State match at example [%s][%s]" % (i, j))
                            candidate = label, False

        return candidate[0]

    def _format_expected(self, expected):
        if self._terminals_by_name:
            d = self._terminals_by_name
            expected = [d[t_name].user_repr() if t_name in d else t_name for t_name in expected]
        return "Expected one of: \n\t* %s\n" % '\n\t* '.join(expected)


class UnexpectedEOF(ParseError, UnexpectedInput):
    #--

    def __init__(self, expected, state=None, terminals_by_name=None):
        super(UnexpectedEOF, self).__init__()

        self.expected = expected
        self.state = state
        from .lexer import Token
        self.token = Token("<EOF>", "")  ##

        self.pos_in_stream = -1
        self.line = -1
        self.column = -1
        self._terminals_by_name = terminals_by_name


    def __str__(self):
        message = "Unexpected end-of-input. "
        message += self._format_expected(self.expected)
        return message


class UnexpectedCharacters(LexError, UnexpectedInput):
    #--

    def __init__(self, seq, lex_pos, line, column, allowed=None, considered_tokens=None, state=None, token_history=None,
                 terminals_by_name=None, considered_rules=None):
        super(UnexpectedCharacters, self).__init__()

        ##

        self.line = line
        self.column = column
        self.pos_in_stream = lex_pos
        self.state = state
        self._terminals_by_name = terminals_by_name

        self.allowed = allowed
        self.considered_tokens = considered_tokens
        self.considered_rules = considered_rules
        self.token_history = token_history

        if isinstance(seq, bytes):
            self.char = seq[lex_pos:lex_pos + 1].decode("ascii", "backslashreplace")
        else:
            self.char = seq[lex_pos]
        self._context = self.get_context(seq)


    def __str__(self):
        message = "No terminal matches '%s' in the current parser context, at line %d col %d" % (self.char, self.line, self.column)
        message += '\n\n' + self._context
        if self.allowed:
            message += self._format_expected(self.allowed)
        if self.token_history:
            message += '\nPrevious tokens: %s\n' % ', '.join(repr(t) for t in self.token_history)
        return message


class UnexpectedToken(ParseError, UnexpectedInput):
    #--

    def __init__(self, token, expected, considered_rules=None, state=None, interactive_parser=None, terminals_by_name=None, token_history=None):
        super(UnexpectedToken, self).__init__()
        
        ##

        self.line = getattr(token, 'line', '?')
        self.column = getattr(token, 'column', '?')
        self.pos_in_stream = getattr(token, 'start_pos', None)
        self.state = state

        self.token = token
        self.expected = expected  ##

        self._accepts = NO_VALUE
        self.considered_rules = considered_rules
        self.interactive_parser = interactive_parser
        self._terminals_by_name = terminals_by_name
        self.token_history = token_history


    @property
    def accepts(self):
        if self._accepts is NO_VALUE:
            self._accepts = self.interactive_parser and self.interactive_parser.accepts()
        return self._accepts

    def __str__(self):
        message = ("Unexpected token %r at line %s, column %s.\n%s"
                   % (self.token, self.line, self.column, self._format_expected(self.accepts or self.expected)))
        if self.token_history:
            message += "Previous tokens: %r\n" % self.token_history

        return message

    @property
    def puppet(self):
        warn("UnexpectedToken.puppet attribute has been renamed to interactive_parser", DeprecationWarning)
        return self.interactive_parser
    


class VisitError(LarkError):
    #--

    def __init__(self, rule, obj, orig_exc):
        message = 'Error trying to process rule "%s":\n\n%s' % (rule, orig_exc)
        super(VisitError, self).__init__(message)

        self.rule = rule
        self.obj = obj
        self.orig_exc = orig_exc


import sys, re
import logging
from io import open
logger = logging.getLogger("lark")
logger.addHandler(logging.StreamHandler())
##

##

logger.setLevel(logging.CRITICAL)

if sys.version_info[0]>2:
    from abc import ABC, abstractmethod
else:
    from abc import ABCMeta, abstractmethod
    class ABC(object): ##

        __slots__ = ()
        __metclass__ = ABCMeta


Py36 = (sys.version_info[:2] >= (3, 6))

NO_VALUE = object()


def classify(seq, key=None, value=None):
    d = {}
    for item in seq:
        k = key(item) if (key is not None) else item
        v = value(item) if (value is not None) else item
        if k in d:
            d[k].append(v)
        else:
            d[k] = [v]
    return d


def _deserialize(data, namespace, memo):
    if isinstance(data, dict):
        if '__type__' in data:  ##

            class_ = namespace[data['__type__']]
            return class_.deserialize(data, memo)
        elif '@' in data:
            return memo[data['@']]
        return {key:_deserialize(value, namespace, memo) for key, value in data.items()}
    elif isinstance(data, list):
        return [_deserialize(value, namespace, memo) for value in data]
    return data


class Serialize(object):
    #--

    def memo_serialize(self, types_to_memoize):
        memo = SerializeMemoizer(types_to_memoize)
        return self.serialize(memo), memo.serialize()

    def serialize(self, memo=None):
        if memo and memo.in_types(self):
            return {'@': memo.memoized.get(self)}

        fields = getattr(self, '__serialize_fields__')
        res = {f: _serialize(getattr(self, f), memo) for f in fields}
        res['__type__'] = type(self).__name__
        if hasattr(self, '_serialize'):
            self._serialize(res, memo)
        return res

    @classmethod
    def deserialize(cls, data, memo):
        namespace = getattr(cls, '__serialize_namespace__', [])
        namespace = {c.__name__:c for c in namespace}

        fields = getattr(cls, '__serialize_fields__')

        if '@' in data:
            return memo[data['@']]

        inst = cls.__new__(cls)
        for f in fields:
            try:
                setattr(inst, f, _deserialize(data[f], namespace, memo))
            except KeyError as e:
                raise KeyError("Cannot find key for class", cls, e)

        if hasattr(inst, '_deserialize'):
            inst._deserialize()

        return inst


class SerializeMemoizer(Serialize):
    #--

    __serialize_fields__ = 'memoized',

    def __init__(self, types_to_memoize):
        self.types_to_memoize = tuple(types_to_memoize)
        self.memoized = Enumerator()

    def in_types(self, value):
        return isinstance(value, self.types_to_memoize)

    def serialize(self):
        return _serialize(self.memoized.reversed(), None)

    @classmethod
    def deserialize(cls, data, namespace, memo):
        return _deserialize(data, namespace, memo)


try:
    STRING_TYPE = basestring
except NameError:   ##

    STRING_TYPE = str


import types
from functools import wraps, partial
from contextlib import contextmanager

Str = type(u'')
try:
    classtype = types.ClassType  ##

except AttributeError:
    classtype = type    ##



def smart_decorator(f, create_decorator):
    if isinstance(f, types.FunctionType):
        return wraps(f)(create_decorator(f, True))

    elif isinstance(f, (classtype, type, types.BuiltinFunctionType)):
        return wraps(f)(create_decorator(f, False))

    elif isinstance(f, types.MethodType):
        return wraps(f)(create_decorator(f.__func__, True))

    elif isinstance(f, partial):
        ##

        return wraps(f.func)(create_decorator(lambda *args, **kw: f(*args[1:], **kw), True))

    else:
        return create_decorator(f.__func__.__call__, True)


try:
    import regex
except ImportError:
    regex = None

import sre_parse
import sre_constants
categ_pattern = re.compile(r'\\p{[A-Za-z_]+}')

def get_regexp_width(expr):
    if regex:
        ##

        ##

        ##

        regexp_final = re.sub(categ_pattern, 'A', expr)
    else:
        if re.search(categ_pattern, expr):
            raise ImportError('`regex` module must be installed in order to use Unicode categories.', expr)
        regexp_final = expr
    try:
        return [int(x) for x in sre_parse.parse(regexp_final).getwidth()]
    except sre_constants.error:
        if not regex:
            raise ValueError(expr)
        else:
            ##

            ##

            c = regex.compile(regexp_final)
            if c.match('') is None:
                return 1, sre_constants.MAXREPEAT
            else:
                return 0, sre_constants.MAXREPEAT


from collections import OrderedDict


class Meta:
    def __init__(self):
        self.empty = True


class Tree(object):
    #--
    def __init__(self, data, children, meta=None):
        self.data = data
        self.children = children
        self._meta = meta

    @property
    def meta(self):
        if self._meta is None:
            self._meta = Meta()
        return self._meta

    def __repr__(self):
        return 'Tree(%r, %r)' % (self.data, self.children)

    def _pretty_label(self):
        return self.data

    def _pretty(self, level, indent_str):
        if len(self.children) == 1 and not isinstance(self.children[0], Tree):
            return [indent_str*level, self._pretty_label(), '\t', '%s' % (self.children[0],), '\n']

        l = [indent_str*level, self._pretty_label(), '\n']
        for n in self.children:
            if isinstance(n, Tree):
                l += n._pretty(level+1, indent_str)
            else:
                l += [indent_str*(level+1), '%s' % (n,), '\n']

        return l

    def pretty(self, indent_str='  '):
        #--
        return ''.join(self._pretty(0, indent_str))

    def __eq__(self, other):
        try:
            return self.data == other.data and self.children == other.children
        except AttributeError:
            return False

    def __ne__(self, other):
        return not (self == other)

    def __hash__(self):
        return hash((self.data, tuple(self.children)))

    def iter_subtrees(self):
        #--
        queue = [self]
        subtrees = OrderedDict()
        for subtree in queue:
            subtrees[id(subtree)] = subtree
            queue += [c for c in reversed(subtree.children)
                      if isinstance(c, Tree) and id(c) not in subtrees]

        del queue
        return reversed(list(subtrees.values()))

    def find_pred(self, pred):
        #--
        return filter(pred, self.iter_subtrees())

    def find_data(self, data):
        #--
        return self.find_pred(lambda t: t.data == data)


from inspect import getmembers, getmro


class Discard(Exception):
    #--
    pass

##



class _Decoratable:
    #--

    @classmethod
    def _apply_decorator(cls, decorator, **kwargs):
        mro = getmro(cls)
        assert mro[0] is cls
        libmembers = {name for _cls in mro[1:] for name, _ in getmembers(_cls)}
        for name, value in getmembers(cls):

            ##

            if name.startswith('_') or (name in libmembers and name not in cls.__dict__):
                continue
            if not callable(value):
                continue

            ##

            if hasattr(cls.__dict__[name], 'vargs_applied') or hasattr(value, 'vargs_applied'):
                continue

            static = isinstance(cls.__dict__[name], (staticmethod, classmethod))
            setattr(cls, name, decorator(value, static=static, **kwargs))
        return cls

    def __class_getitem__(cls, _):
        return cls


class Transformer(_Decoratable):
    #--
    __visit_tokens__ = True   ##


    def __init__(self,  visit_tokens=True):
        self.__visit_tokens__ = visit_tokens

    def _call_userfunc(self, tree, new_children=None):
        ##

        children = new_children if new_children is not None else tree.children
        try:
            f = getattr(self, tree.data)
        except AttributeError:
            return self.__default__(tree.data, children, tree.meta)
        else:
            try:
                wrapper = getattr(f, 'visit_wrapper', None)
                if wrapper is not None:
                    return f.visit_wrapper(f, tree.data, children, tree.meta)
                else:
                    return f(children)
            except (GrammarError, Discard):
                raise
            except Exception as e:
                raise VisitError(tree.data, tree, e)

    def _call_userfunc_token(self, token):
        try:
            f = getattr(self, token.type)
        except AttributeError:
            return self.__default_token__(token)
        else:
            try:
                return f(token)
            except (GrammarError, Discard):
                raise
            except Exception as e:
                raise VisitError(token.type, token, e)

    def _transform_children(self, children):
        for c in children:
            try:
                if isinstance(c, Tree):
                    yield self._transform_tree(c)
                elif self.__visit_tokens__ and isinstance(c, Token):
                    yield self._call_userfunc_token(c)
                else:
                    yield c
            except Discard:
                pass

    def _transform_tree(self, tree):
        children = list(self._transform_children(tree.children))
        return self._call_userfunc(tree, children)

    def transform(self, tree):
        #--
        return self._transform_tree(tree)

    def __mul__(self, other):
        #--
        return TransformerChain(self, other)

    def __default__(self, data, children, meta):
        #--
        return Tree(data, children, meta)

    def __default_token__(self, token):
        #--
        return token


def merge_transformers(base_transformer=None, **transformers_to_merge):
    #--
    if base_transformer is None:
        base_transformer = Transformer()
    for prefix, transformer in transformers_to_merge.items():
        for method_name in dir(transformer):
            method = getattr(transformer, method_name)
            if not callable(method):
                continue
            if method_name.startswith("_") or method_name == "transform":
                continue
            prefixed_method = prefix + "__" + method_name
            if hasattr(base_transformer, prefixed_method):
                raise AttributeError("Cannot merge: method '%s' appears more than once" % prefixed_method)

            setattr(base_transformer, prefixed_method, method)

    return base_transformer


class InlineTransformer(Transformer):   ##

    def _call_userfunc(self, tree, new_children=None):
        ##

        children = new_children if new_children is not None else tree.children
        try:
            f = getattr(self, tree.data)
        except AttributeError:
            return self.__default__(tree.data, children, tree.meta)
        else:
            return f(*children)


class TransformerChain(object):
    def __init__(self, *transformers):
        self.transformers = transformers

    def transform(self, tree):
        for t in self.transformers:
            tree = t.transform(tree)
        return tree

    def __mul__(self, other):
        return TransformerChain(*self.transformers + (other,))


class Transformer_InPlace(Transformer):
    #--
    def _transform_tree(self, tree):           ##

        return self._call_userfunc(tree)

    def transform(self, tree):
        for subtree in tree.iter_subtrees():
            subtree.children = list(self._transform_children(subtree.children))

        return self._transform_tree(tree)


class Transformer_NonRecursive(Transformer):
    #--

    def transform(self, tree):
        ##

        rev_postfix = []
        q = [tree]
        while q:
            t = q.pop()
            rev_postfix.append(t)
            if isinstance(t, Tree):
                q += t.children

        ##

        stack = []
        for x in reversed(rev_postfix):
            if isinstance(x, Tree):
                size = len(x.children)
                if size:
                    args = stack[-size:]
                    del stack[-size:]
                else:
                    args = []
                stack.append(self._call_userfunc(x, args))
            elif self.__visit_tokens__ and isinstance(x, Token):
                stack.append(self._call_userfunc_token(x))
            else:
                stack.append(x)

        t ,= stack  ##

        return t


class Transformer_InPlaceRecursive(Transformer):
    #--
    def _transform_tree(self, tree):
        tree.children = list(self._transform_children(tree.children))
        return self._call_userfunc(tree)


##


class VisitorBase:
    def _call_userfunc(self, tree):
        return getattr(self, tree.data, self.__default__)(tree)

    def __default__(self, tree):
        #--
        return tree

    def __class_getitem__(cls, _):
        return cls


class Visitor(VisitorBase):
    #--

    def visit(self, tree):
        #--
        for subtree in tree.iter_subtrees():
            self._call_userfunc(subtree)
        return tree

    def visit_topdown(self,tree):
        #--
        for subtree in tree.iter_subtrees_topdown():
            self._call_userfunc(subtree)
        return tree


class Visitor_Recursive(VisitorBase):
    #--

    def visit(self, tree):
        #--
        for child in tree.children:
            if isinstance(child, Tree):
                self.visit(child)

        self._call_userfunc(tree)
        return tree

    def visit_topdown(self,tree):
        #--
        self._call_userfunc(tree)

        for child in tree.children:
            if isinstance(child, Tree):
                self.visit_topdown(child)

        return tree


def visit_children_decor(func):
    #--
    @wraps(func)
    def inner(cls, tree):
        values = cls.visit_children(tree)
        return func(cls, values)
    return inner


class Interpreter(_Decoratable):
    #--

    def visit(self, tree):
        f = getattr(self, tree.data)
        wrapper = getattr(f, 'visit_wrapper', None)
        if wrapper is not None:
            return f.visit_wrapper(f, tree.data, tree.children, tree.meta)
        else:
            return f(tree)

    def visit_children(self, tree):
        return [self.visit(child) if isinstance(child, Tree) else child
                for child in tree.children]

    def __getattr__(self, name):
        return self.__default__

    def __default__(self, tree):
        return self.visit_children(tree)


##


def _apply_decorator(obj, decorator, **kwargs):
    try:
        _apply = obj._apply_decorator
    except AttributeError:
        return decorator(obj, **kwargs)
    else:
        return _apply(decorator, **kwargs)


def _inline_args__func(func):
    @wraps(func)
    def create_decorator(_f, with_self):
        if with_self:
            def f(self, children):
                return _f(self, *children)
        else:
            def f(self, children):
                return _f(*children)
        return f

    return smart_decorator(func, create_decorator)


def inline_args(obj):   ##

    return _apply_decorator(obj, _inline_args__func)


def _visitor_args_func_dec(func, visit_wrapper=None, static=False):
    def create_decorator(_f, with_self):
        if with_self:
            def f(self, *args, **kwargs):
                return _f(self, *args, **kwargs)
        else:
            def f(self, *args, **kwargs):
                return _f(*args, **kwargs)
        return f

    if static:
        f = wraps(func)(create_decorator(func, False))
    else:
        f = smart_decorator(func, create_decorator)
    f.vargs_applied = True
    f.visit_wrapper = visit_wrapper
    return f


def _vargs_inline(f, _data, children, _meta):
    return f(*children)
def _vargs_meta_inline(f, _data, children, meta):
    return f(meta, *children)
def _vargs_meta(f, _data, children, meta):
    return f(children, meta)   ##

def _vargs_tree(f, data, children, meta):
    return f(Tree(data, children, meta))


def v_args(inline=False, meta=False, tree=False, wrapper=None):
    #--
    if tree and (meta or inline):
        raise ValueError("Visitor functions cannot combine 'tree' with 'meta' or 'inline'.")

    func = None
    if meta:
        if inline:
            func = _vargs_meta_inline
        else:
            func = _vargs_meta
    elif inline:
        func = _vargs_inline
    elif tree:
        func = _vargs_tree

    if wrapper is not None:
        if func is not None:
            raise ValueError("Cannot use 'wrapper' along with 'tree', 'meta' or 'inline'.")
        func = wrapper

    def _visitor_args_dec(obj):
        return _apply_decorator(obj, _visitor_args_func_dec, visit_wrapper=func)
    return _visitor_args_dec




class Symbol(Serialize):
    __slots__ = ('name',)

    is_term = NotImplemented

    def __init__(self, name):
        self.name = name

    def __eq__(self, other):
        assert isinstance(other, Symbol), other
        return self.is_term == other.is_term and self.name == other.name

    def __ne__(self, other):
        return not (self == other)

    def __hash__(self):
        return hash(self.name)

    def __repr__(self):
        return '%s(%r)' % (type(self).__name__, self.name)

    fullrepr = property(__repr__)


class Terminal(Symbol):
    __serialize_fields__ = 'name', 'filter_out'

    is_term = True

    def __init__(self, name, filter_out=False):
        self.name = name
        self.filter_out = filter_out

    @property
    def fullrepr(self):
        return '%s(%r, %r)' % (type(self).__name__, self.name, self.filter_out)


class NonTerminal(Symbol):
    __serialize_fields__ = 'name',

    is_term = False


class RuleOptions(Serialize):
    __serialize_fields__ = 'keep_all_tokens', 'expand1', 'priority', 'template_source', 'empty_indices'

    def __init__(self, keep_all_tokens=False, expand1=False, priority=None, template_source=None, empty_indices=()):
        self.keep_all_tokens = keep_all_tokens
        self.expand1 = expand1
        self.priority = priority
        self.template_source = template_source
        self.empty_indices = empty_indices

    def __repr__(self):
        return 'RuleOptions(%r, %r, %r, %r)' % (
            self.keep_all_tokens,
            self.expand1,
            self.priority,
            self.template_source
        )


class Rule(Serialize):
    #--
    __slots__ = ('origin', 'expansion', 'alias', 'options', 'order', '_hash')

    __serialize_fields__ = 'origin', 'expansion', 'order', 'alias', 'options'
    __serialize_namespace__ = Terminal, NonTerminal, RuleOptions

    def __init__(self, origin, expansion, order=0, alias=None, options=None):
        self.origin = origin
        self.expansion = expansion
        self.alias = alias
        self.order = order
        self.options = options or RuleOptions()
        self._hash = hash((self.origin, tuple(self.expansion)))

    def _deserialize(self):
        self._hash = hash((self.origin, tuple(self.expansion)))

    def __str__(self):
        return '<%s : %s>' % (self.origin.name, ' '.join(x.name for x in self.expansion))

    def __repr__(self):
        return 'Rule(%r, %r, %r, %r)' % (self.origin, self.expansion, self.alias, self.options)

    def __hash__(self):
        return self._hash

    def __eq__(self, other):
        if not isinstance(other, Rule):
            return False
        return self.origin == other.origin and self.expansion == other.expansion



from warnings import warn
from copy import copy


class Pattern(Serialize):
    raw = None
    type = None

    def __init__(self, value, flags=(), raw=None):
        self.value = value
        self.flags = frozenset(flags)
        self.raw = raw

    def __repr__(self):
        return repr(self.to_regexp())

    ##

    def __hash__(self):
        return hash((type(self), self.value, self.flags))

    def __eq__(self, other):
        return type(self) == type(other) and self.value == other.value and self.flags == other.flags

    def to_regexp(self):
        raise NotImplementedError()

    def min_width(self):
        raise NotImplementedError()

    def max_width(self):
        raise NotImplementedError()

    if Py36:
        ##

        def _get_flags(self, value):
            for f in self.flags:
                value = ('(?%s:%s)' % (f, value))
            return value

    else:
        def _get_flags(self, value):
            for f in self.flags:
                value = ('(?%s)' % f) + value
            return value



class PatternStr(Pattern):
    __serialize_fields__ = 'value', 'flags'

    type = "str"

    def to_regexp(self):
        return self._get_flags(re.escape(self.value))

    @property
    def min_width(self):
        return len(self.value)
    max_width = min_width


class PatternRE(Pattern):
    __serialize_fields__ = 'value', 'flags', '_width'

    type = "re"

    def to_regexp(self):
        return self._get_flags(self.value)

    _width = None
    def _get_width(self):
        if self._width is None:
            self._width = get_regexp_width(self.to_regexp())
        return self._width

    @property
    def min_width(self):
        return self._get_width()[0]

    @property
    def max_width(self):
        return self._get_width()[1]


class TerminalDef(Serialize):
    __serialize_fields__ = 'name', 'pattern', 'priority'
    __serialize_namespace__ = PatternStr, PatternRE

    def __init__(self, name, pattern, priority=1):
        assert isinstance(pattern, Pattern), pattern
        self.name = name
        self.pattern = pattern
        self.priority = priority

    def __repr__(self):
        return '%s(%r, %r)' % (type(self).__name__, self.name, self.pattern)

    def user_repr(self):
        if self.name.startswith('__'): ##

            return self.pattern.raw or self.name
        else:
            return self.name


class Token(Str):
    #--
    __slots__ = ('type', 'start_pos', 'value', 'line', 'column', 'end_line', 'end_column', 'end_pos')

    def __new__(cls, type_, value, start_pos=None, line=None, column=None, end_line=None, end_column=None, end_pos=None, pos_in_stream=None):
        try:
            inst = super(Token, cls).__new__(cls, value)
        except UnicodeDecodeError:
            value = value.decode('latin1')
            inst = super(Token, cls).__new__(cls, value)

        inst.type = type_
        inst.start_pos = start_pos if start_pos is not None else pos_in_stream
        inst.value = value
        inst.line = line
        inst.column = column
        inst.end_line = end_line
        inst.end_column = end_column
        inst.end_pos = end_pos
        return inst

    @property
    def pos_in_stream(self):
        warn("Attribute Token.pos_in_stream was renamed to Token.start_pos", DeprecationWarning, 2)
        return self.start_pos

    def update(self, type_=None, value=None):
        return Token.new_borrow_pos(
            type_ if type_ is not None else self.type,
            value if value is not None else self.value,
            self
        )

    @classmethod
    def new_borrow_pos(cls, type_, value, borrow_t):
        return cls(type_, value, borrow_t.start_pos, borrow_t.line, borrow_t.column, borrow_t.end_line, borrow_t.end_column, borrow_t.end_pos)

    def __reduce__(self):
        return (self.__class__, (self.type, self.value, self.start_pos, self.line, self.column))

    def __repr__(self):
        return 'Token(%r, %r)' % (self.type, self.value)

    def __deepcopy__(self, memo):
        return Token(self.type, self.value, self.start_pos, self.line, self.column)

    def __eq__(self, other):
        if isinstance(other, Token) and self.type != other.type:
            return False

        return Str.__eq__(self, other)

    __hash__ = Str.__hash__


class LineCounter:
    __slots__ = 'char_pos', 'line', 'column', 'line_start_pos', 'newline_char'

    def __init__(self, newline_char):
        self.newline_char = newline_char
        self.char_pos = 0
        self.line = 1
        self.column = 1
        self.line_start_pos = 0

    def __eq__(self, other):
        if not isinstance(other, LineCounter):
            return NotImplemented

        return self.char_pos == other.char_pos and self.newline_char == other.newline_char

    def feed(self, token, test_newline=True):
        #--
        if test_newline:
            newlines = token.count(self.newline_char)
            if newlines:
                self.line += newlines
                self.line_start_pos = self.char_pos + token.rindex(self.newline_char) + 1

        self.char_pos += len(token)
        self.column = self.char_pos - self.line_start_pos + 1


class UnlessCallback:
    def __init__(self, scanner):
        self.scanner = scanner

    def __call__(self, t):
        res = self.scanner.match(t.value, 0)
        if res:
            _value, t.type = res
        return t


class CallChain:
    def __init__(self, callback1, callback2, cond):
        self.callback1 = callback1
        self.callback2 = callback2
        self.cond = cond

    def __call__(self, t):
        t2 = self.callback1(t)
        return self.callback2(t) if self.cond(t2) else t2


def _get_match(re_, regexp, s, flags):
    m = re_.match(regexp, s, flags)
    if m:
        return m.group(0)

def _create_unless(terminals, g_regex_flags, re_, use_bytes):
    tokens_by_type = classify(terminals, lambda t: type(t.pattern))
    assert len(tokens_by_type) <= 2, tokens_by_type.keys()
    embedded_strs = set()
    callback = {}
    for retok in tokens_by_type.get(PatternRE, []):
        unless = []
        for strtok in tokens_by_type.get(PatternStr, []):
            if strtok.priority > retok.priority:
                continue
            s = strtok.pattern.value
            if s == _get_match(re_, retok.pattern.to_regexp(), s, g_regex_flags):
                unless.append(strtok)
                if strtok.pattern.flags <= retok.pattern.flags:
                    embedded_strs.add(strtok)
        if unless:
            callback[retok.name] = UnlessCallback(Scanner(unless, g_regex_flags, re_, match_whole=True, use_bytes=use_bytes))

    new_terminals = [t for t in terminals if t not in embedded_strs]
    return new_terminals, callback



class Scanner:
    def __init__(self, terminals, g_regex_flags, re_, use_bytes, match_whole=False):
        self.terminals = terminals
        self.g_regex_flags = g_regex_flags
        self.re_ = re_
        self.use_bytes = use_bytes
        self.match_whole = match_whole

        self.allowed_types = {t.name for t in self.terminals}

        self._mres = self._build_mres(terminals, len(terminals))

    def _build_mres(self, terminals, max_size):
        ##

        ##

        ##

        postfix = '$' if self.match_whole else ''
        mres = []
        while terminals:
            pattern = u'|'.join(u'(?P<%s>%s)' % (t.name, t.pattern.to_regexp() + postfix) for t in terminals[:max_size])
            if self.use_bytes:
                pattern = pattern.encode('latin-1')
            try:
                mre = self.re_.compile(pattern, self.g_regex_flags)
            except AssertionError:  ##

                return self._build_mres(terminals, max_size//2)

            mres.append((mre, {i: n for n, i in mre.groupindex.items()}))
            terminals = terminals[max_size:]
        return mres

    def match(self, text, pos):
        for mre, type_from_index in self._mres:
            m = mre.match(text, pos)
            if m:
                return m.group(0), type_from_index[m.lastindex]


def _regexp_has_newline(r):
    #--
    return '\n' in r or '\\n' in r or '\\s' in r or '[^' in r or ('(?s' in r and '.' in r)


class Lexer(object):
    #--
    lex = NotImplemented

    def make_lexer_state(self, text):
        line_ctr = LineCounter(b'\n' if isinstance(text, bytes) else '\n')
        return LexerState(text, line_ctr)


class TraditionalLexer(Lexer):

    def __init__(self, conf):
        terminals = list(conf.terminals)
        assert all(isinstance(t, TerminalDef) for t in terminals), terminals

        self.re = conf.re_module

        if not conf.skip_validation:
            ##

            for t in terminals:
                try:
                    self.re.compile(t.pattern.to_regexp(), conf.g_regex_flags)
                except self.re.error:
                    raise LexError("Cannot compile token %s: %s" % (t.name, t.pattern))

                if t.pattern.min_width == 0:
                    raise LexError("Lexer does not allow zero-width terminals. (%s: %s)" % (t.name, t.pattern))

            if not (set(conf.ignore) <= {t.name for t in terminals}):
                raise LexError("Ignore terminals are not defined: %s" % (set(conf.ignore) - {t.name for t in terminals}))

        ##

        self.newline_types = frozenset(t.name for t in terminals if _regexp_has_newline(t.pattern.to_regexp()))
        self.ignore_types = frozenset(conf.ignore)

        terminals.sort(key=lambda x: (-x.priority, -x.pattern.max_width, -len(x.pattern.value), x.name))
        self.terminals = terminals
        self.user_callbacks = conf.callbacks
        self.g_regex_flags = conf.g_regex_flags
        self.use_bytes = conf.use_bytes
        self.terminals_by_name = conf.terminals_by_name

        self._scanner = None

    def _build_scanner(self):
        terminals, self.callback = _create_unless(self.terminals, self.g_regex_flags, self.re, self.use_bytes)
        assert all(self.callback.values())

        for type_, f in self.user_callbacks.items():
            if type_ in self.callback:
                ##

                self.callback[type_] = CallChain(self.callback[type_], f, lambda t: t.type == type_)
            else:
                self.callback[type_] = f

        self._scanner = Scanner(terminals, self.g_regex_flags, self.re, self.use_bytes)

    @property
    def scanner(self):
        if self._scanner is None:
            self._build_scanner()
        return self._scanner

    def match(self, text, pos):
        return self.scanner.match(text, pos)

    def lex(self, state, parser_state):
        with suppress(EOFError):
            while True:
                yield self.next_token(state, parser_state)

    def next_token(self, lex_state, parser_state=None):
        line_ctr = lex_state.line_ctr
        while line_ctr.char_pos < len(lex_state.text):
            res = self.match(lex_state.text, line_ctr.char_pos)
            if not res:
                allowed = self.scanner.allowed_types - self.ignore_types
                if not allowed:
                    allowed = {"<END-OF-FILE>"}
                raise UnexpectedCharacters(lex_state.text, line_ctr.char_pos, line_ctr.line, line_ctr.column,
                                           allowed=allowed, token_history=lex_state.last_token and [lex_state.last_token],
                                           state=parser_state, terminals_by_name=self.terminals_by_name)

            value, type_ = res

            if type_ not in self.ignore_types:
                t = Token(type_, value, line_ctr.char_pos, line_ctr.line, line_ctr.column)
                line_ctr.feed(value, type_ in self.newline_types)
                t.end_line = line_ctr.line
                t.end_column = line_ctr.column
                t.end_pos = line_ctr.char_pos
                if t.type in self.callback:
                    t = self.callback[t.type](t)
                    if not isinstance(t, Token):
                        raise LexError("Callbacks must return a token (returned %r)" % t)
                lex_state.last_token = t
                return t
            else:
                if type_ in self.callback:
                    t2 = Token(type_, value, line_ctr.char_pos, line_ctr.line, line_ctr.column)
                    self.callback[type_](t2)
                line_ctr.feed(value, type_ in self.newline_types)

        ##

        raise EOFError(self)


class LexerState(object):
    __slots__ = 'text', 'line_ctr', 'last_token'

    def __init__(self, text, line_ctr, last_token=None):
        self.text = text
        self.line_ctr = line_ctr
        self.last_token = last_token

    def __eq__(self, other):
        if not isinstance(other, LexerState):
            return NotImplemented

        return self.text is other.text and self.line_ctr == other.line_ctr and self.last_token == other.last_token

    def __copy__(self):
        return type(self)(self.text, copy(self.line_ctr), self.last_token)


class ContextualLexer(Lexer):

    def __init__(self, conf, states, always_accept=()):
        terminals = list(conf.terminals)
        terminals_by_name = conf.terminals_by_name

        trad_conf = copy(conf)
        trad_conf.terminals = terminals

        lexer_by_tokens = {}
        self.lexers = {}
        for state, accepts in states.items():
            key = frozenset(accepts)
            try:
                lexer = lexer_by_tokens[key]
            except KeyError:
                accepts = set(accepts) | set(conf.ignore) | set(always_accept)
                lexer_conf = copy(trad_conf)
                lexer_conf.terminals = [terminals_by_name[n] for n in accepts if n in terminals_by_name]
                lexer = TraditionalLexer(lexer_conf)
                lexer_by_tokens[key] = lexer

            self.lexers[state] = lexer

        assert trad_conf.terminals is terminals
        self.root_lexer = TraditionalLexer(trad_conf)

    def make_lexer_state(self, text):
        return self.root_lexer.make_lexer_state(text)

    def lex(self, lexer_state, parser_state):
        try:
            while True:
                lexer = self.lexers[parser_state.position]
                yield lexer.next_token(lexer_state, parser_state)
        except EOFError:
            pass
        except UnexpectedCharacters as e:
            ##

            ##

            try:
                last_token = lexer_state.last_token  ##

                token = self.root_lexer.next_token(lexer_state, parser_state)
                raise UnexpectedToken(token, e.allowed, state=parser_state, token_history=[last_token], terminals_by_name=self.root_lexer.terminals_by_name)
            except UnexpectedCharacters:
                raise e  ##


class LexerThread(object):
    #--

    def __init__(self, lexer, text):
        self.lexer = lexer
        self.state = lexer.make_lexer_state(text)

    def lex(self, parser_state):
        return self.lexer.lex(self.state, parser_state)

    def __copy__(self):
        copied = object.__new__(LexerThread)
        copied.lexer = self.lexer
        copied.state = copy(self.state)
        return copied



class LexerConf(Serialize):
    __serialize_fields__ = 'terminals', 'ignore', 'g_regex_flags', 'use_bytes', 'lexer_type'
    __serialize_namespace__ = TerminalDef,

    def __init__(self, terminals, re_module, ignore=(), postlex=None, callbacks=None, g_regex_flags=0, skip_validation=False, use_bytes=False):
        self.terminals = terminals
        self.terminals_by_name = {t.name: t for t in self.terminals}
        assert len(self.terminals) == len(self.terminals_by_name)
        self.ignore = ignore
        self.postlex = postlex
        self.callbacks = callbacks or {}
        self.g_regex_flags = g_regex_flags
        self.re_module = re_module
        self.skip_validation = skip_validation
        self.use_bytes = use_bytes
        self.lexer_type = None

    @property
    def tokens(self):
        warn("LexerConf.tokens is deprecated. Use LexerConf.terminals instead", DeprecationWarning)
        return self.terminals

    def _deserialize(self):
        self.terminals_by_name = {t.name: t for t in self.terminals}

    def __deepcopy__(self, memo=None):
        return type(self)(
            deepcopy(self.terminals, memo),
            self.re_module,
            deepcopy(self.ignore, memo),
            deepcopy(self.postlex, memo),
            deepcopy(self.callbacks, memo),
            deepcopy(self.g_regex_flags, memo),
            deepcopy(self.skip_validation, memo),
            deepcopy(self.use_bytes, memo),
        )


class ParserConf(Serialize):
    __serialize_fields__ = 'rules', 'start', 'parser_type'

    def __init__(self, rules, callbacks, start):
        assert isinstance(start, list)
        self.rules = rules
        self.callbacks = callbacks
        self.start = start

        self.parser_type = None


from functools import partial, wraps
from itertools import repeat, product


class ExpandSingleChild:
    def __init__(self, node_builder):
        self.node_builder = node_builder

    def __call__(self, children):
        if len(children) == 1:
            return children[0]
        else:
            return self.node_builder(children)



class PropagatePositions:
    def __init__(self, node_builder, node_filter=None):
        self.node_builder = node_builder
        self.node_filter = node_filter

    def __call__(self, children):
        res = self.node_builder(children)

        if isinstance(res, Tree):
            ##

            ##

            ##

            ##


            res_meta = res.meta

            first_meta = self._pp_get_meta(children)
            if first_meta is not None:
                if not hasattr(res_meta, 'line'):
                    ##

                    res_meta.line = getattr(first_meta, 'container_line', first_meta.line)
                    res_meta.column = getattr(first_meta, 'container_column', first_meta.column)
                    res_meta.start_pos = getattr(first_meta, 'container_start_pos', first_meta.start_pos)
                    res_meta.empty = False

                res_meta.container_line = getattr(first_meta, 'container_line', first_meta.line)
                res_meta.container_column = getattr(first_meta, 'container_column', first_meta.column)

            last_meta = self._pp_get_meta(reversed(children))
            if last_meta is not None:
                if not hasattr(res_meta, 'end_line'):
                    res_meta.end_line = getattr(last_meta, 'container_end_line', last_meta.end_line)
                    res_meta.end_column = getattr(last_meta, 'container_end_column', last_meta.end_column)
                    res_meta.end_pos = getattr(last_meta, 'container_end_pos', last_meta.end_pos)
                    res_meta.empty = False

                res_meta.container_end_line = getattr(last_meta, 'container_end_line', last_meta.end_line)
                res_meta.container_end_column = getattr(last_meta, 'container_end_column', last_meta.end_column)

        return res

    def _pp_get_meta(self, children):
        for c in children:
            if self.node_filter is not None and not self.node_filter(c):
                continue
            if isinstance(c, Tree):
                if not c.meta.empty:
                    return c.meta
            elif isinstance(c, Token):
                return c

def make_propagate_positions(option):
    if callable(option):
        return partial(PropagatePositions, node_filter=option)
    elif option is True:
        return PropagatePositions
    elif option is False:
        return None

    raise ConfigurationError('Invalid option for propagate_positions: %r' % option)


class ChildFilter:
    def __init__(self, to_include, append_none, node_builder):
        self.node_builder = node_builder
        self.to_include = to_include
        self.append_none = append_none

    def __call__(self, children):
        filtered = []

        for i, to_expand, add_none in self.to_include:
            if add_none:
                filtered += [None] * add_none
            if to_expand:
                filtered += children[i].children
            else:
                filtered.append(children[i])

        if self.append_none:
            filtered += [None] * self.append_none

        return self.node_builder(filtered)


class ChildFilterLALR(ChildFilter):
    #--

    def __call__(self, children):
        filtered = []
        for i, to_expand, add_none in self.to_include:
            if add_none:
                filtered += [None] * add_none
            if to_expand:
                if filtered:
                    filtered += children[i].children
                else:   ##

                    filtered = children[i].children
            else:
                filtered.append(children[i])

        if self.append_none:
            filtered += [None] * self.append_none

        return self.node_builder(filtered)


class ChildFilterLALR_NoPlaceholders(ChildFilter):
    #--
    def __init__(self, to_include, node_builder):
        self.node_builder = node_builder
        self.to_include = to_include

    def __call__(self, children):
        filtered = []
        for i, to_expand in self.to_include:
            if to_expand:
                if filtered:
                    filtered += children[i].children
                else:   ##

                    filtered = children[i].children
            else:
                filtered.append(children[i])
        return self.node_builder(filtered)


def _should_expand(sym):
    return not sym.is_term and sym.name.startswith('_')


def maybe_create_child_filter(expansion, keep_all_tokens, ambiguous, _empty_indices):
    ##

    if _empty_indices:
        assert _empty_indices.count(False) == len(expansion)
        s = ''.join(str(int(b)) for b in _empty_indices)
        empty_indices = [len(ones) for ones in s.split('0')]
        assert len(empty_indices) == len(expansion)+1, (empty_indices, len(expansion))
    else:
        empty_indices = [0] * (len(expansion)+1)

    to_include = []
    nones_to_add = 0
    for i, sym in enumerate(expansion):
        nones_to_add += empty_indices[i]
        if keep_all_tokens or not (sym.is_term and sym.filter_out):
            to_include.append((i, _should_expand(sym), nones_to_add))
            nones_to_add = 0

    nones_to_add += empty_indices[len(expansion)]

    if _empty_indices or len(to_include) < len(expansion) or any(to_expand for i, to_expand,_ in to_include):
        if _empty_indices or ambiguous:
            return partial(ChildFilter if ambiguous else ChildFilterLALR, to_include, nones_to_add)
        else:
            ##

            return partial(ChildFilterLALR_NoPlaceholders, [(i, x) for i,x,_ in to_include])


class AmbiguousExpander:
    #--
    def __init__(self, to_expand, tree_class, node_builder):
        self.node_builder = node_builder
        self.tree_class = tree_class
        self.to_expand = to_expand

    def __call__(self, children):
        def _is_ambig_tree(t):
            return hasattr(t, 'data') and t.data == '_ambig'

        ##

        ##

        ##

        ##

        ambiguous = []
        for i, child in enumerate(children):
            if _is_ambig_tree(child):
                if i in self.to_expand:
                    ambiguous.append(i)

                child.expand_kids_by_data('_ambig')

        if not ambiguous:
            return self.node_builder(children)

        expand = [iter(child.children) if i in ambiguous else repeat(child) for i, child in enumerate(children)]
        return self.tree_class('_ambig', [self.node_builder(list(f[0])) for f in product(zip(*expand))])


def maybe_create_ambiguous_expander(tree_class, expansion, keep_all_tokens):
    to_expand = [i for i, sym in enumerate(expansion)
                 if keep_all_tokens or ((not (sym.is_term and sym.filter_out)) and _should_expand(sym))]
    if to_expand:
        return partial(AmbiguousExpander, to_expand, tree_class)


class AmbiguousIntermediateExpander:
    #--

    def __init__(self, tree_class, node_builder):
        self.node_builder = node_builder
        self.tree_class = tree_class

    def __call__(self, children):
        def _is_iambig_tree(child):
            return hasattr(child, 'data') and child.data == '_iambig'

        def _collapse_iambig(children):
            #--

            ##

            ##

            if children and _is_iambig_tree(children[0]):
                iambig_node = children[0]
                result = []
                for grandchild in iambig_node.children:
                    collapsed = _collapse_iambig(grandchild.children)
                    if collapsed:
                        for child in collapsed:
                            child.children += children[1:]
                        result += collapsed
                    else:
                        new_tree = self.tree_class('_inter', grandchild.children + children[1:])
                        result.append(new_tree)
                return result

        collapsed = _collapse_iambig(children)
        if collapsed:
            processed_nodes = [self.node_builder(c.children) for c in collapsed]
            return self.tree_class('_ambig', processed_nodes)

        return self.node_builder(children)


def ptb_inline_args(func):
    @wraps(func)
    def f(children):
        return func(*children)
    return f


def inplace_transformer(func):
    @wraps(func)
    def f(children):
        ##

        tree = Tree(func.__name__, children)
        return func(tree)
    return f


def apply_visit_wrapper(func, name, wrapper):
    if wrapper is _vargs_meta or wrapper is _vargs_meta_inline:
        raise NotImplementedError("Meta args not supported for internal transformer")

    @wraps(func)
    def f(children):
        return wrapper(func, name, children, None)
    return f


class ParseTreeBuilder:
    def __init__(self, rules, tree_class, propagate_positions=False, ambiguous=False, maybe_placeholders=False):
        self.tree_class = tree_class
        self.propagate_positions = propagate_positions
        self.ambiguous = ambiguous
        self.maybe_placeholders = maybe_placeholders

        self.rule_builders = list(self._init_builders(rules))

    def _init_builders(self, rules):
        propagate_positions = make_propagate_positions(self.propagate_positions)

        for rule in rules:
            options = rule.options
            keep_all_tokens = options.keep_all_tokens
            expand_single_child = options.expand1

            wrapper_chain = list(filter(None, [
                (expand_single_child and not rule.alias) and ExpandSingleChild,
                maybe_create_child_filter(rule.expansion, keep_all_tokens, self.ambiguous, options.empty_indices if self.maybe_placeholders else None),
                propagate_positions,
                self.ambiguous and maybe_create_ambiguous_expander(self.tree_class, rule.expansion, keep_all_tokens),
                self.ambiguous and partial(AmbiguousIntermediateExpander, self.tree_class)
            ]))

            yield rule, wrapper_chain

    def create_callback(self, transformer=None):
        callbacks = {}

        for rule, wrapper_chain in self.rule_builders:

            user_callback_name = rule.alias or rule.options.template_source or rule.origin.name
            try:
                f = getattr(transformer, user_callback_name)
                ##

                wrapper = getattr(f, 'visit_wrapper', None)
                if wrapper is not None:
                    f = apply_visit_wrapper(f, user_callback_name, wrapper)
                else:
                    if isinstance(transformer, InlineTransformer):
                        f = ptb_inline_args(f)
                    elif isinstance(transformer, Transformer_InPlace):
                        f = inplace_transformer(f)
            except AttributeError:
                f = partial(self.tree_class, user_callback_name)

            for w in wrapper_chain:
                f = w(f)

            if rule in callbacks:
                raise GrammarError("Rule '%s' already exists" % (rule,))

            callbacks[rule] = f

        return callbacks



class LALR_Parser(Serialize):
    def __init__(self, parser_conf, debug=False):
        analysis = LALR_Analyzer(parser_conf, debug=debug)
        analysis.compute_lalr()
        callbacks = parser_conf.callbacks

        self._parse_table = analysis.parse_table
        self.parser_conf = parser_conf
        self.parser = _Parser(analysis.parse_table, callbacks, debug)

    @classmethod
    def deserialize(cls, data, memo, callbacks, debug=False):
        inst = cls.__new__(cls)
        inst._parse_table = IntParseTable.deserialize(data, memo)
        inst.parser = _Parser(inst._parse_table, callbacks, debug)
        return inst

    def serialize(self, memo):
        return self._parse_table.serialize(memo)
    
    def parse_interactive(self, lexer, start):
        return self.parser.parse(lexer, start, start_interactive=True)

    def parse(self, lexer, start, on_error=None):
        try:
            return self.parser.parse(lexer, start)
        except UnexpectedInput as e:
            if on_error is None:
                raise

            while True:
                if isinstance(e, UnexpectedCharacters):
                    s = e.interactive_parser.lexer_state.state
                    p = s.line_ctr.char_pos

                if not on_error(e):
                    raise e

                if isinstance(e, UnexpectedCharacters):
                    ##

                    if p == s.line_ctr.char_pos:
                        s.line_ctr.feed(s.text[p:p+1])

                try:
                    return e.interactive_parser.resume_parse()
                except UnexpectedToken as e2:
                    if (isinstance(e, UnexpectedToken)
                        and e.token.type == e2.token.type == '$END'
                        and e.interactive_parser == e2.interactive_parser):
                        ##

                        raise e2
                    e = e2
                except UnexpectedCharacters as e2:
                    e = e2


class ParseConf(object):
    __slots__ = 'parse_table', 'callbacks', 'start', 'start_state', 'end_state', 'states'

    def __init__(self, parse_table, callbacks, start):
        self.parse_table = parse_table

        self.start_state = self.parse_table.start_states[start]
        self.end_state = self.parse_table.end_states[start]
        self.states = self.parse_table.states

        self.callbacks = callbacks
        self.start = start


class ParserState(object):
    __slots__ = 'parse_conf', 'lexer', 'state_stack', 'value_stack'

    def __init__(self, parse_conf, lexer, state_stack=None, value_stack=None):
        self.parse_conf = parse_conf
        self.lexer = lexer
        self.state_stack = state_stack or [self.parse_conf.start_state]
        self.value_stack = value_stack or []

    @property
    def position(self):
        return self.state_stack[-1]

    ##

    def __eq__(self, other):
        if not isinstance(other, ParserState):
            return NotImplemented
        return len(self.state_stack) == len(other.state_stack) and self.position == other.position

    def __copy__(self):
        return type(self)(
            self.parse_conf,
            self.lexer, ##

            copy(self.state_stack),
            deepcopy(self.value_stack),
        )

    def copy(self):
        return copy(self)

    def feed_token(self, token, is_end=False):
        state_stack = self.state_stack
        value_stack = self.value_stack
        states = self.parse_conf.states
        end_state = self.parse_conf.end_state
        callbacks = self.parse_conf.callbacks

        while True:
            state = state_stack[-1]
            try:
                action, arg = states[state][token.type]
            except KeyError:
                expected = {s for s in states[state].keys() if s.isupper()}
                raise UnexpectedToken(token, expected, state=self, interactive_parser=None)

            assert arg != end_state

            if action is Shift:
                ##

                assert not is_end
                state_stack.append(arg)
                value_stack.append(token if token.type not in callbacks else callbacks[token.type](token))
                return
            else:
                ##

                rule = arg
                size = len(rule.expansion)
                if size:
                    s = value_stack[-size:]
                    del state_stack[-size:]
                    del value_stack[-size:]
                else:
                    s = []

                value = callbacks[rule](s)

                _action, new_state = states[state_stack[-1]][rule.origin.name]
                assert _action is Shift
                state_stack.append(new_state)
                value_stack.append(value)

                if is_end and state_stack[-1] == end_state:
                    return value_stack[-1]

class _Parser(object):
    def __init__(self, parse_table, callbacks, debug=False):
        self.parse_table = parse_table
        self.callbacks = callbacks
        self.debug = debug

    def parse(self, lexer, start, value_stack=None, state_stack=None, start_interactive=False):
        parse_conf = ParseConf(self.parse_table, self.callbacks, start)
        parser_state = ParserState(parse_conf, lexer, state_stack, value_stack)
        if start_interactive:
            return InteractiveParser(self, parser_state, parser_state.lexer)
        return self.parse_from_state(parser_state)
    

    def parse_from_state(self, state):
        ##

        try:
            token = None
            for token in state.lexer.lex(state):
                state.feed_token(token)

            end_token = Token.new_borrow_pos('$END', '', token) if token else Token('$END', '', 0, 1, 1)
            return state.feed_token(end_token, True)
        except UnexpectedInput as e:
            try:
                e.interactive_parser = InteractiveParser(self, state, state.lexer)
            except NameError:
                pass
            raise e
        except Exception as e:
            if self.debug:
                print("")
                print("STATE STACK DUMP")
                print("----------------")
                for i, s in enumerate(state.state_stack):
                    print('%d)' % i , s)
                print("")

            raise


class Action:
    def __init__(self, name):
        self.name = name
    def __str__(self):
        return self.name
    def __repr__(self):
        return str(self)

Shift = Action('Shift')
Reduce = Action('Reduce')


class ParseTable:
    def __init__(self, states, start_states, end_states):
        self.states = states
        self.start_states = start_states
        self.end_states = end_states

    def serialize(self, memo):
        tokens = Enumerator()
        rules = Enumerator()

        states = {
            state: {tokens.get(token): ((1, arg.serialize(memo)) if action is Reduce else (0, arg))
                    for token, (action, arg) in actions.items()}
            for state, actions in self.states.items()
        }

        return {
            'tokens': tokens.reversed(),
            'states': states,
            'start_states': self.start_states,
            'end_states': self.end_states,
        }

    @classmethod
    def deserialize(cls, data, memo):
        tokens = data['tokens']
        states = {
            state: {tokens[token]: ((Reduce, Rule.deserialize(arg, memo)) if action==1 else (Shift, arg))
                    for token, (action, arg) in actions.items()}
            for state, actions in data['states'].items()
        }
        return cls(states, data['start_states'], data['end_states'])


class IntParseTable(ParseTable):

    @classmethod
    def from_ParseTable(cls, parse_table):
        enum = list(parse_table.states)
        state_to_idx = {s:i for i,s in enumerate(enum)}
        int_states = {}

        for s, la in parse_table.states.items():
            la = {k:(v[0], state_to_idx[v[1]]) if v[0] is Shift else v
                  for k,v in la.items()}
            int_states[ state_to_idx[s] ] = la


        start_states = {start:state_to_idx[s] for start, s in parse_table.start_states.items()}
        end_states = {start:state_to_idx[s] for start, s in parse_table.end_states.items()}
        return cls(int_states, start_states, end_states)



def _wrap_lexer(lexer_class):
    future_interface = getattr(lexer_class, '__future_interface__', False)
    if future_interface:
        return lexer_class
    else:
        class CustomLexerWrapper(Lexer):
            def __init__(self, lexer_conf):
                self.lexer = lexer_class(lexer_conf)
            def lex(self, lexer_state, parser_state):
                return self.lexer.lex(lexer_state.text)
        return CustomLexerWrapper


class MakeParsingFrontend:
    def __init__(self, parser_type, lexer_type):
        self.parser_type = parser_type
        self.lexer_type = lexer_type

    def __call__(self, lexer_conf, parser_conf, options):
        assert isinstance(lexer_conf, LexerConf)
        assert isinstance(parser_conf, ParserConf)
        parser_conf.parser_type = self.parser_type
        lexer_conf.lexer_type = self.lexer_type
        return ParsingFrontend(lexer_conf, parser_conf, options)

    def deserialize(self, data, memo, lexer_conf, callbacks, options):
        parser_conf = ParserConf.deserialize(data['parser_conf'], memo)
        parser = LALR_Parser.deserialize(data['parser'], memo, callbacks, options.debug)
        parser_conf.callbacks = callbacks
        return ParsingFrontend(lexer_conf, parser_conf, options, parser=parser)




class ParsingFrontend(Serialize):
    __serialize_fields__ = 'lexer_conf', 'parser_conf', 'parser', 'options'

    def __init__(self, lexer_conf, parser_conf, options, parser=None):
        self.parser_conf = parser_conf
        self.lexer_conf = lexer_conf
        self.options = options

        ##

        if parser:  ##

            self.parser = parser
        else:
            create_parser = {
                'lalr': create_lalr_parser,
                'earley': create_earley_parser,
                'cyk': CYK_FrontEnd,
            }[parser_conf.parser_type]
            self.parser = create_parser(lexer_conf, parser_conf, options)

        ##

        lexer_type = lexer_conf.lexer_type
        self.skip_lexer = False
        if lexer_type in ('dynamic', 'dynamic_complete'):
            assert lexer_conf.postlex is None
            self.skip_lexer = True
            return

        try:
            create_lexer = {
                'standard': create_traditional_lexer,
                'contextual': create_contextual_lexer,
            }[lexer_type]
        except KeyError:
            assert issubclass(lexer_type, Lexer), lexer_type
            self.lexer = _wrap_lexer(lexer_type)(lexer_conf)
        else:
            self.lexer = create_lexer(lexer_conf, self.parser, lexer_conf.postlex)

        if lexer_conf.postlex:
            self.lexer = PostLexConnector(self.lexer, lexer_conf.postlex)
    
    def _verify_start(self, start=None):
        if start is None:
            start_decls = self.parser_conf.start
            if len(start_decls) > 1:
                raise ConfigurationError("Lark initialized with more than 1 possible start rule. Must specify which start rule to parse", start_decls)
            start ,= start_decls
        elif start not in self.parser_conf.start:
            raise ConfigurationError("Unknown start rule %s. Must be one of %r" % (start, self.parser_conf.start))
        return start

    def parse(self, text, start=None, on_error=None):
        chosen_start = self._verify_start(start)
        stream = text if self.skip_lexer else LexerThread(self.lexer, text)
        kw = {} if on_error is None else {'on_error': on_error}
        return self.parser.parse(stream, chosen_start, **kw)
    
    def parse_interactive(self, text=None, start=None):
        chosen_start = self._verify_start(start)
        if self.parser_conf.parser_type != 'lalr':
            raise ConfigurationError("parse_interactive() currently only works with parser='lalr' ")
        stream = text if self.skip_lexer else LexerThread(self.lexer, text)
        return self.parser.parse_interactive(stream, chosen_start)


def get_frontend(parser, lexer):
    assert_config(parser, ('lalr', 'earley', 'cyk'))
    if not isinstance(lexer, type):     ##

        expected = {
            'lalr': ('standard', 'contextual'),
            'earley': ('standard', 'dynamic', 'dynamic_complete'),
            'cyk': ('standard', ),
         }[parser]
        assert_config(lexer, expected, 'Parser %r does not support lexer %%r, expected one of %%s' % parser)

    return MakeParsingFrontend(parser, lexer)


def _get_lexer_callbacks(transformer, terminals):
    result = {}
    for terminal in terminals:
        callback = getattr(transformer, terminal.name, None)
        if callback is not None:
            result[terminal.name] = callback
    return result

class PostLexConnector:
    def __init__(self, lexer, postlexer):
        self.lexer = lexer
        self.postlexer = postlexer

    def make_lexer_state(self, text):
        return self.lexer.make_lexer_state(text)

    def lex(self, lexer_state, parser_state):
        i = self.lexer.lex(lexer_state, parser_state)
        return self.postlexer.process(i)



def create_traditional_lexer(lexer_conf, parser, postlex):
    return TraditionalLexer(lexer_conf)

def create_contextual_lexer(lexer_conf, parser, postlex):
    states = {idx:list(t.keys()) for idx, t in parser._parse_table.states.items()}
    always_accept = postlex.always_accept if postlex else ()
    return ContextualLexer(lexer_conf, states, always_accept=always_accept)

def create_lalr_parser(lexer_conf, parser_conf, options=None):
    debug = options.debug if options else False
    return LALR_Parser(parser_conf, debug=debug)


create_earley_parser = NotImplemented
CYK_FrontEnd = NotImplemented



class LarkOptions(Serialize):
    #--
    OPTIONS_DOC = """
    **===  General Options  ===**

    start
            The start symbol. Either a string, or a list of strings for multiple possible starts (Default: "start")
    debug
            Display debug information and extra warnings. Use only when debugging (default: False)
            When used with Earley, it generates a forest graph as "sppf.png", if 'dot' is installed.
    transformer
            Applies the transformer to every parse tree (equivalent to applying it after the parse, but faster)
    propagate_positions
            Propagates (line, column, end_line, end_column) attributes into all tree branches.
            Accepts ``False``, ``True``, or a callable, which will filter which nodes to ignore when propagating.
    maybe_placeholders
            When ``True``, the ``[]`` operator returns ``None`` when not matched.

            When ``False``,  ``[]`` behaves like the ``?`` operator, and returns no value at all.
            (default= ``False``. Recommended to set to ``True``)
    cache
            Cache the results of the Lark grammar analysis, for x2 to x3 faster loading. LALR only for now.

            - When ``False``, does nothing (default)
            - When ``True``, caches to a temporary file in the local directory
            - When given a string, caches to the path pointed by the string
    regex
            When True, uses the ``regex`` module instead of the stdlib ``re``.
    g_regex_flags
            Flags that are applied to all terminals (both regex and strings)
    keep_all_tokens
            Prevent the tree builder from automagically removing "punctuation" tokens (default: False)
    tree_class
            Lark will produce trees comprised of instances of this class instead of the default ``lark.Tree``.

    **=== Algorithm Options ===**

    parser
            Decides which parser engine to use. Accepts "earley" or "lalr". (Default: "earley").
            (there is also a "cyk" option for legacy)
    lexer
            Decides whether or not to use a lexer stage

            - "auto" (default): Choose for me based on the parser
            - "standard": Use a standard lexer
            - "contextual": Stronger lexer (only works with parser="lalr")
            - "dynamic": Flexible and powerful (only with parser="earley")
            - "dynamic_complete": Same as dynamic, but tries *every* variation of tokenizing possible.
    ambiguity
            Decides how to handle ambiguity in the parse. Only relevant if parser="earley"

            - "resolve": The parser will automatically choose the simplest derivation
              (it chooses consistently: greedy for tokens, non-greedy for rules)
            - "explicit": The parser will return all derivations wrapped in "_ambig" tree nodes (i.e. a forest).
            - "forest": The parser will return the root of the shared packed parse forest.

    **=== Misc. / Domain Specific Options ===**

    postlex
            Lexer post-processing (Default: None) Only works with the standard and contextual lexers.
    priority
            How priorities should be evaluated - auto, none, normal, invert (Default: auto)
    lexer_callbacks
            Dictionary of callbacks for the lexer. May alter tokens during lexing. Use with caution.
    use_bytes
            Accept an input of type ``bytes`` instead of ``str`` (Python 3 only).
    edit_terminals
            A callback for editing the terminals before parse.
    import_paths
            A List of either paths or loader functions to specify from where grammars are imported
    source_path
            Override the source of from where the grammar was loaded. Useful for relative imports and unconventional grammar loading
    **=== End of Options ===**
    """
    if __doc__:
        __doc__ += OPTIONS_DOC


    ##

    ##

    ##

    ##

    ##

    ##

    ##

    ##

    _defaults = {
        'debug': False,
        'keep_all_tokens': False,
        'tree_class': None,
        'cache': False,
        'postlex': None,
        'parser': 'earley',
        'lexer': 'auto',
        'transformer': None,
        'start': 'start',
        'priority': 'auto',
        'ambiguity': 'auto',
        'regex': False,
        'propagate_positions': False,
        'lexer_callbacks': {},
        'maybe_placeholders': False,
        'edit_terminals': None,
        'g_regex_flags': 0,
        'use_bytes': False,
        'import_paths': [],
        'source_path': None,
    }

    def __init__(self, options_dict):
        o = dict(options_dict)

        options = {}
        for name, default in self._defaults.items():
            if name in o:
                value = o.pop(name)
                if isinstance(default, bool) and name not in ('cache', 'use_bytes', 'propagate_positions'):
                    value = bool(value)
            else:
                value = default

            options[name] = value

        if isinstance(options['start'], STRING_TYPE):
            options['start'] = [options['start']]

        self.__dict__['options'] = options


        assert_config(self.parser, ('earley', 'lalr', 'cyk', None))

        if self.parser == 'earley' and self.transformer:
            raise ConfigurationError('Cannot specify an embedded transformer when using the Earley algorithm. '
                             'Please use your transformer on the resulting parse tree, or use a different algorithm (i.e. LALR)')

        if o:
            raise ConfigurationError("Unknown options: %s" % o.keys())

    def __getattr__(self, name):
        try:
            return self.__dict__['options'][name]
        except KeyError as e:
            raise AttributeError(e)

    def __setattr__(self, name, value):
        assert_config(name, self.options.keys(), "%r isn't a valid option. Expected one of: %s")
        self.options[name] = value

    def serialize(self, memo):
        return self.options

    @classmethod
    def deserialize(cls, data, memo):
        return cls(data)


##

##

_LOAD_ALLOWED_OPTIONS = {'postlex', 'transformer', 'lexer_callbacks', 'use_bytes', 'debug', 'g_regex_flags', 'regex', 'propagate_positions', 'tree_class'}

_VALID_PRIORITY_OPTIONS = ('auto', 'normal', 'invert', None)
_VALID_AMBIGUITY_OPTIONS = ('auto', 'resolve', 'explicit', 'forest')


class PostLex(ABC):
    @abstractmethod
    def process(self, stream):
        return stream

    always_accept = ()


class Lark(Serialize):
    #--
    def __init__(self, grammar, **options):
        self.options = LarkOptions(options)

        ##

        use_regex = self.options.regex
        if use_regex:
            if regex:
                re_module = regex
            else:
                raise ImportError('`regex` module must be installed if calling `Lark(regex=True)`.')
        else:
            re_module = re

        ##

        if self.options.source_path is None:
            try:
                self.source_path = grammar.name
            except AttributeError:
                self.source_path = '<string>'
        else:
            self.source_path = self.options.source_path

        ##

        try:
            read = grammar.read
        except AttributeError:
            pass
        else:
            grammar = read()

        cache_fn = None
        cache_md5 = None
        if isinstance(grammar, STRING_TYPE):
            self.source_grammar = grammar
            if self.options.use_bytes:
                if not isascii(grammar):
                    raise ConfigurationError("Grammar must be ascii only, when use_bytes=True")
                if sys.version_info[0] == 2 and self.options.use_bytes != 'force':
                    raise ConfigurationError("`use_bytes=True` may have issues on python2."
                                              "Use `use_bytes='force'` to use it at your own risk.")

            if self.options.cache:
                if self.options.parser != 'lalr':
                    raise ConfigurationError("cache only works with parser='lalr' for now")

                unhashable = ('transformer', 'postlex', 'lexer_callbacks', 'edit_terminals')
                options_str = ''.join(k+str(v) for k, v in options.items() if k not in unhashable)
                from . import __version__
                s = grammar + options_str + __version__ + str(sys.version_info[:2])
                cache_md5 = hashlib.md5(s.encode('utf8')).hexdigest()

                if isinstance(self.options.cache, STRING_TYPE):
                    cache_fn = self.options.cache
                else:
                    if self.options.cache is not True:
                        raise ConfigurationError("cache argument must be bool or str")
                    ##

                    cache_fn = tempfile.gettempdir() + '/.lark_cache_%s_%s_%s.tmp' % ((cache_md5,) + sys.version_info[:2])

                if FS.exists(cache_fn):
                    logger.debug('Loading grammar from cache: %s', cache_fn)
                    ##

                    for name in (set(options) - _LOAD_ALLOWED_OPTIONS):
                        del options[name]
                    with FS.open(cache_fn, 'rb') as f:
                        old_options = self.options
                        try:
                            file_md5 = f.readline().rstrip(b'\n')
                            cached_used_files = pickle.load(f)
                            if file_md5 == cache_md5.encode('utf8') and verify_used_files(cached_used_files):
                                cached_parser_data = pickle.load(f)
                                self._load(cached_parser_data, **options)
                                return
                        except Exception: ##

                            logger.exception("Failed to load Lark from cache: %r. We will try to carry on." % cache_fn)
                            
                            ##

                            ##

                            self.options = old_options


            ##

            self.grammar, used_files = load_grammar(grammar, self.source_path, self.options.import_paths, self.options.keep_all_tokens)
        else:
            assert isinstance(grammar, Grammar)
            self.grammar = grammar


        if self.options.lexer == 'auto':
            if self.options.parser == 'lalr':
                self.options.lexer = 'contextual'
            elif self.options.parser == 'earley':
                if self.options.postlex is not None:
                    logger.info("postlex can't be used with the dynamic lexer, so we use standard instead. "
                                "Consider using lalr with contextual instead of earley")
                    self.options.lexer = 'standard'
                else:
                    self.options.lexer = 'dynamic'
            elif self.options.parser == 'cyk':
                self.options.lexer = 'standard'
            else:
                assert False, self.options.parser
        lexer = self.options.lexer
        if isinstance(lexer, type):
            assert issubclass(lexer, Lexer)     ##

        else:
            assert_config(lexer, ('standard', 'contextual', 'dynamic', 'dynamic_complete'))
            if self.options.postlex is not None and 'dynamic' in lexer:
                raise ConfigurationError("Can't use postlex with a dynamic lexer. Use standard or contextual instead")

        if self.options.ambiguity == 'auto':
            if self.options.parser == 'earley':
                self.options.ambiguity = 'resolve'
        else:
            assert_config(self.options.parser, ('earley', 'cyk'), "%r doesn't support disambiguation. Use one of these parsers instead: %s")

        if self.options.priority == 'auto':
            self.options.priority = 'normal'

        if self.options.priority not in _VALID_PRIORITY_OPTIONS:
            raise ConfigurationError("invalid priority option: %r. Must be one of %r" % (self.options.priority, _VALID_PRIORITY_OPTIONS))
        assert self.options.ambiguity not in ('resolve__antiscore_sum', ), 'resolve__antiscore_sum has been replaced with the option priority="invert"'
        if self.options.ambiguity not in _VALID_AMBIGUITY_OPTIONS:
            raise ConfigurationError("invalid ambiguity option: %r. Must be one of %r" % (self.options.ambiguity, _VALID_AMBIGUITY_OPTIONS))

        if self.options.parser is None:
            terminals_to_keep = '*'
        elif self.options.postlex is not None:
            terminals_to_keep = set(self.options.postlex.always_accept)
        else:
            terminals_to_keep = set()

        ##

        self.terminals, self.rules, self.ignore_tokens = self.grammar.compile(self.options.start, terminals_to_keep)

        if self.options.edit_terminals:
            for t in self.terminals:
                self.options.edit_terminals(t)

        self._terminals_dict = {t.name: t for t in self.terminals}

        ##

        ##

        if self.options.priority == 'invert':
            for rule in self.rules:
                if rule.options.priority is not None:
                    rule.options.priority = -rule.options.priority
        ##

        ##

        ##

        elif self.options.priority is None:
            for rule in self.rules:
                if rule.options.priority is not None:
                    rule.options.priority = None

        ##

        self.lexer_conf = LexerConf(
                self.terminals, re_module, self.ignore_tokens, self.options.postlex,
                self.options.lexer_callbacks, self.options.g_regex_flags, use_bytes=self.options.use_bytes
            )

        if self.options.parser:
            self.parser = self._build_parser()
        elif lexer:
            self.lexer = self._build_lexer()

        if cache_fn:
            logger.debug('Saving grammar to cache: %s', cache_fn)
            with FS.open(cache_fn, 'wb') as f:
                f.write(cache_md5.encode('utf8') + b'\n')
                pickle.dump(used_files, f)
                self.save(f)

    if __doc__:
        __doc__ += "\n\n" + LarkOptions.OPTIONS_DOC

    __serialize_fields__ = 'parser', 'rules', 'options'

    def _build_lexer(self, dont_ignore=False):
        lexer_conf = self.lexer_conf
        if dont_ignore:
            from copy import copy
            lexer_conf = copy(lexer_conf)
            lexer_conf.ignore = ()
        return TraditionalLexer(lexer_conf)

    def _prepare_callbacks(self):
        self._callbacks = {}
        ##

        if self.options.ambiguity != 'forest':
            self._parse_tree_builder = ParseTreeBuilder(
                    self.rules,
                    self.options.tree_class or Tree,
                    self.options.propagate_positions,
                    self.options.parser != 'lalr' and self.options.ambiguity == 'explicit',
                    self.options.maybe_placeholders
                )
            self._callbacks = self._parse_tree_builder.create_callback(self.options.transformer)
        self._callbacks.update(_get_lexer_callbacks(self.options.transformer, self.terminals))

    def _build_parser(self):
        self._prepare_callbacks()
        parser_class = get_frontend(self.options.parser, self.options.lexer)
        parser_conf = ParserConf(self.rules, self._callbacks, self.options.start)
        return parser_class(self.lexer_conf, parser_conf, options=self.options)

    def save(self, f):
        #--
        data, m = self.memo_serialize([TerminalDef, Rule])
        pickle.dump({'data': data, 'memo': m}, f, protocol=pickle.HIGHEST_PROTOCOL)

    @classmethod
    def load(cls, f):
        #--
        inst = cls.__new__(cls)
        return inst._load(f)

    def _deserialize_lexer_conf(self, data, memo, options):
        lexer_conf = LexerConf.deserialize(data['lexer_conf'], memo)
        lexer_conf.callbacks = options.lexer_callbacks or {}
        lexer_conf.re_module = regex if options.regex else re
        lexer_conf.use_bytes = options.use_bytes
        lexer_conf.g_regex_flags = options.g_regex_flags
        lexer_conf.skip_validation = True
        lexer_conf.postlex = options.postlex
        return lexer_conf

    def _load(self, f, **kwargs):
        if isinstance(f, dict):
            d = f
        else:
            d = pickle.load(f)
        memo_json = d['memo']
        data = d['data']

        assert memo_json
        memo = SerializeMemoizer.deserialize(memo_json, {'Rule': Rule, 'TerminalDef': TerminalDef}, {})
        options = dict(data['options'])
        if (set(kwargs) - _LOAD_ALLOWED_OPTIONS) & set(LarkOptions._defaults):
            raise ConfigurationError("Some options are not allowed when loading a Parser: {}"
                             .format(set(kwargs) - _LOAD_ALLOWED_OPTIONS))
        options.update(kwargs)
        self.options = LarkOptions.deserialize(options, memo)
        self.rules = [Rule.deserialize(r, memo) for r in data['rules']]
        self.source_path = '<deserialized>'
        parser_class = get_frontend(self.options.parser, self.options.lexer)
        self.lexer_conf = self._deserialize_lexer_conf(data['parser'], memo, self.options)
        self.terminals = self.lexer_conf.terminals
        self._prepare_callbacks()
        self._terminals_dict = {t.name: t for t in self.terminals}
        self.parser = parser_class.deserialize(
            data['parser'],
            memo,
            self.lexer_conf,
            self._callbacks,
            self.options,  ##

        )
        return self

    @classmethod
    def _load_from_dict(cls, data, memo, **kwargs):
        inst = cls.__new__(cls)
        return inst._load({'data': data, 'memo': memo}, **kwargs)

    @classmethod
    def open(cls, grammar_filename, rel_to=None, **options):
        #--
        if rel_to:
            basepath = os.path.dirname(rel_to)
            grammar_filename = os.path.join(basepath, grammar_filename)
        with open(grammar_filename, encoding='utf8') as f:
            return cls(f, **options)

    @classmethod
    def open_from_package(cls, package, grammar_path, search_paths=("",), **options):
        #--
        package_loader = FromPackageLoader(package, search_paths)
        full_path, text = package_loader(None, grammar_path)
        options.setdefault('source_path', full_path)
        options.setdefault('import_paths', [])
        options['import_paths'].append(package_loader)
        return cls(text, **options)

    def __repr__(self):
        return 'Lark(open(%r), parser=%r, lexer=%r, ...)' % (self.source_path, self.options.parser, self.options.lexer)


    def lex(self, text, dont_ignore=False):
        #--
        if not hasattr(self, 'lexer') or dont_ignore:
            lexer = self._build_lexer(dont_ignore)
        else:
            lexer = self.lexer
        lexer_thread = LexerThread(lexer, text)
        stream = lexer_thread.lex(None)
        if self.options.postlex:
            return self.options.postlex.process(stream)
        return stream

    def get_terminal(self, name):
        #--
        return self._terminals_dict[name]
    
    def parse_interactive(self, text=None, start=None):
        #--
        return self.parser.parse_interactive(text, start=start)

    def parse(self, text, start=None, on_error=None):
        #--
        return self.parser.parse(text, start=start, on_error=on_error)

    @property
    def source(self):
        warn("Attribute Lark.source was renamed to Lark.source_path", DeprecationWarning)
        return self.source_path

    @source.setter
    def source(self, value):
        self.source_path = value

    @property
    def grammar_source(self):
        warn("Attribute Lark.grammar_source was renamed to Lark.source_grammar", DeprecationWarning)
        return self.source_grammar

    @grammar_source.setter
    def grammar_source(self, value):
        self.source_grammar = value



class DedentError(LarkError):
    pass

class Indenter(PostLex):
    def __init__(self):
        self.paren_level = None
        self.indent_level = None
        assert self.tab_len > 0

    def handle_NL(self, token):
        if self.paren_level > 0:
            return

        yield token

        indent_str = token.rsplit('\n', 1)[1] ##

        indent = indent_str.count(' ') + indent_str.count('\t') * self.tab_len

        if indent > self.indent_level[-1]:
            self.indent_level.append(indent)
            yield Token.new_borrow_pos(self.INDENT_type, indent_str, token)
        else:
            while indent < self.indent_level[-1]:
                self.indent_level.pop()
                yield Token.new_borrow_pos(self.DEDENT_type, indent_str, token)

            if indent != self.indent_level[-1]:
                raise DedentError('Unexpected dedent to column %s. Expected dedent to %s' % (indent, self.indent_level[-1]))

    def _process(self, stream):
        for token in stream:
            if token.type == self.NL_type:
                for t in self.handle_NL(token):
                    yield t
            else:
                yield token

            if token.type in self.OPEN_PAREN_types:
                self.paren_level += 1
            elif token.type in self.CLOSE_PAREN_types:
                self.paren_level -= 1
                assert self.paren_level >= 0

        while len(self.indent_level) > 1:
            self.indent_level.pop()
            yield Token(self.DEDENT_type, '')

        assert self.indent_level == [0], self.indent_level

    def process(self, stream):
        self.paren_level = 0
        self.indent_level = [0]
        return self._process(stream)

    ##

    @property
    def always_accept(self):
        return (self.NL_type,)


import pickle, zlib, base64
DATA = (
{'parser': {'lexer_conf': {'terminals': [{'@': 0}, {'@': 1}, {'@': 2}, {'@': 3}, {'@': 4}, {'@': 5}, {'@': 6}, {'@': 7}, {'@': 8}, {'@': 9}, {'@': 10}, {'@': 11}, {'@': 12}, {'@': 13}, {'@': 14}, {'@': 15}, {'@': 16}, {'@': 17}, {'@': 18}, {'@': 19}, {'@': 20}, {'@': 21}, {'@': 22}, {'@': 23}, {'@': 24}, {'@': 25}, {'@': 26}, {'@': 27}, {'@': 28}, {'@': 29}, {'@': 30}, {'@': 31}, {'@': 32}, {'@': 33}, {'@': 34}, {'@': 35}, {'@': 36}, {'@': 37}, {'@': 38}, {'@': 39}, {'@': 40}, {'@': 41}, {'@': 42}, {'@': 43}, {'@': 44}, {'@': 45}, {'@': 46}, {'@': 47}, {'@': 48}, {'@': 49}, {'@': 50}, {'@': 51}, {'@': 52}, {'@': 53}, {'@': 54}], 'ignore': ['WS'], 'g_regex_flags': 0, 'use_bytes': False, 'lexer_type': 'contextual', '__type__': 'LexerConf'}, 'parser_conf': {'rules': [{'@': 55}, {'@': 56}, {'@': 57}, {'@': 58}, {'@': 59}, {'@': 60}, {'@': 61}, {'@': 62}, {'@': 63}, {'@': 64}, {'@': 65}, {'@': 66}, {'@': 67}, {'@': 68}, {'@': 69}, {'@': 70}, {'@': 71}, {'@': 72}, {'@': 73}, {'@': 74}, {'@': 75}, {'@': 76}, {'@': 77}, {'@': 78}, {'@': 79}, {'@': 80}, {'@': 81}, {'@': 82}, {'@': 83}, {'@': 84}, {'@': 85}, {'@': 86}, {'@': 87}, {'@': 88}, {'@': 89}, {'@': 90}, {'@': 91}, {'@': 92}, {'@': 93}, {'@': 94}, {'@': 95}, {'@': 96}, {'@': 97}, {'@': 98}, {'@': 99}, {'@': 100}, {'@': 101}, {'@': 102}, {'@': 103}, {'@': 104}, {'@': 105}, {'@': 106}, {'@': 107}, {'@': 108}, {'@': 109}, {'@': 110}, {'@': 111}, {'@': 112}, {'@': 113}, {'@': 114}, {'@': 115}, {'@': 116}, {'@': 117}, {'@': 118}, {'@': 119}, {'@': 120}, {'@': 121}, {'@': 122}, {'@': 123}, {'@': 124}, {'@': 125}, {'@': 126}, {'@': 127}, {'@': 128}, {'@': 129}, {'@': 130}, {'@': 131}, {'@': 132}, {'@': 133}, {'@': 134}, {'@': 135}, {'@': 136}, {'@': 137}, {'@': 138}, {'@': 139}, {'@': 140}, {'@': 141}, {'@': 142}, {'@': 143}, {'@': 144}, {'@': 145}, {'@': 146}, {'@': 147}, {'@': 148}, {'@': 149}, {'@': 150}, {'@': 151}, {'@': 152}, {'@': 153}, {'@': 154}, {'@': 155}, {'@': 156}, {'@': 157}, {'@': 158}, {'@': 159}, {'@': 160}, {'@': 161}, {'@': 162}, {'@': 163}, {'@': 164}, {'@': 165}, {'@': 166}, {'@': 167}, {'@': 168}, {'@': 169}, {'@': 170}, {'@': 171}, {'@': 172}, {'@': 173}, {'@': 174}, {'@': 175}, {'@': 176}, {'@': 177}, {'@': 178}, {'@': 179}, {'@': 180}, {'@': 181}, {'@': 182}, {'@': 183}, {'@': 184}, {'@': 185}, {'@': 186}, {'@': 187}, {'@': 188}, {'@': 189}, {'@': 190}, {'@': 191}, {'@': 192}, {'@': 193}, {'@': 194}, {'@': 195}, {'@': 196}, {'@': 197}, {'@': 198}, {'@': 199}, {'@': 200}, {'@': 201}, {'@': 202}, {'@': 203}, {'@': 204}, {'@': 205}, {'@': 206}, {'@': 207}, {'@': 208}, {'@': 209}, {'@': 210}, {'@': 211}, {'@': 212}, {'@': 213}, {'@': 214}, {'@': 215}, {'@': 216}, {'@': 217}, {'@': 218}, {'@': 219}], 'start': ['start'], 'parser_type': 'lalr', '__type__': 'ParserConf'}, 'parser': {'tokens': {0: 'int_set', 1: 'string', 2: 'LBRACE', 3: 'int_image', 4: 'LPAR', 5: 'HASH', 6: 'con_ext_set', 7: 'word', 8: 'negation', 9: 'con_int_set', 10: '__ANON_24', 11: 'LSQB', 12: 'term', 13: '__ANON_16', 14: 'single', 15: '__ANON_25', 16: 'con_negation', 17: 'term_nonvar', 18: 'variable', 19: 'set', 20: 'interval', 21: 'DOLLAR', 22: 'CIRCUMFLEX', 23: 'op', 24: 'ext_image', 25: 'PLUS', 26: 'string_raw', 27: 'statement', 28: 'ext_set', 29: 'QMARK', 30: 'LESSTHAN', 31: 'multi', 32: 'compound_term', 33: 'NUMBER', 34: '__ANON_17', 35: 'tense', 36: '__ANON_20', 37: 'truth', 38: 'PERCENT', 39: '__ANON_18', 40: '__ANON_19', 41: '$END', 42: 'RPAR', 43: 'COMMA', 44: '__statement_star_0', 45: '__ANON_12', 46: '__ANON_14', 47: '__ANON_13', 48: 'STAR', 49: 'MINUS', 50: 'TILDE', 51: 'RSQB', 52: '__ANON_15', 53: 'AMPERSAND', 54: 'VBAR', 55: 'MORETHAN', 56: 'RBRACE', 57: '__ANON_11', 58: '__ANON_7', 59: '__ANON_4', 60: '__ANON_10', 61: '__ANON_8', 62: '__ANON_1', 63: '__ANON_6', 64: '__ANON_0', 65: '__ANON_9', 66: '__ANON_5', 67: '__ANON_3', 68: '__ANON_2', 69: 'DOT', 70: 'BANG', 71: 'AT', 72: 'multi_extint_expr', 73: 'term2', 74: 'multi_sequential_expr', 75: 'term4', 76: 'term3', 77: 'multi_intint_expr', 78: 'term1', 79: 'multi_parallel_expr', 80: 'SEMICOLON', 81: 'priority', 82: '__ANON_21', 83: '__multi_sequential_expr_plus_4', 84: '__multi_extint_expr_plus_7', 85: 'k_evidence', 86: '__ANON_23', 87: '__ANON_22', 88: 'durability', 89: 'copula', 90: '__multi_intint_expr_plus_6', 91: '__multi_disj_expr_plus_2', 92: '__multi_conj_expr_plus_3', 93: 'term5', 94: 'multi_conj_expr', 95: 'desire', 96: 'con_single', 97: 'multi_infix_expr', 98: 'term6', 99: 'multi_disj_expr', 100: 'multi_prod_expr', 101: 'quality', 102: 'sentence', 103: 'confidence', 104: 'COLON', 105: '__multi_parallel_expr_plus_5', 106: 'budget', 107: 'task', 108: 'start', 109: 'BACKSLASH', 110: 'SLASH', 111: 'con_product', 112: 'con_ext_image', 113: 'con_multi', 114: 'con_int_image', 115: '__multi_prod_expr_plus_1', 116: 'frequency'}, 'states': {0: {0: (0, 11), 1: (0, 15), 2: (0, 7), 3: (0, 142), 4: (0, 221), 5: (0, 231), 6: (0, 136), 7: (0, 108), 8: (0, 76), 9: (0, 19), 10: (0, 93), 11: (0, 3), 12: (0, 75), 13: (0, 55), 14: (0, 106), 15: (0, 24), 16: (0, 125), 17: (0, 126), 18: (0, 86), 19: (0, 80), 20: (0, 71), 21: (0, 248), 22: (0, 51), 23: (0, 44), 24: (0, 97), 25: (0, 2), 26: (0, 47), 27: (0, 89), 28: (0, 234), 29: (0, 77), 30: (0, 198), 31: (0, 61), 32: (0, 182)}, 1: {0: (0, 11), 1: (0, 15), 2: (0, 7), 3: (0, 142), 4: (0, 221), 5: (0, 231), 6: (0, 136), 12: (0, 246), 7: (0, 108), 9: (0, 19), 8: (0, 76), 11: (0, 3), 10: (0, 93), 13: (0, 55), 14: (0, 106), 15: (0, 24), 16: (0, 125), 32: (0, 182), 17: (0, 126), 18: (0, 86), 19: (0, 80), 20: (0, 71), 21: (0, 248), 22: (0, 51), 23: (0, 44), 24: (0, 97), 25: (0, 2), 26: (0, 47), 27: (0, 89), 28: (0, 234), 29: (0, 77), 30: (0, 198), 31: (0, 61)}, 2: {33: (0, 245)}, 3: {11: (1, {'@': 175}), 5: (1, {'@': 175}), 30: (1, {'@': 175}), 25: (1, {'@': 175}), 4: (1, {'@': 175}), 2: (1, {'@': 175}), 22: (1, {'@': 175}), 15: (1, {'@': 175}), 13: (1, {'@': 175}), 29: (1, {'@': 175}), 21: (1, {'@': 175}), 10: (1, {'@': 175})}, 4: {34: (0, 127), 35: (0, 48), 36: (0, 52), 37: (0, 35), 38: (0, 251), 39: (0, 220), 40: (0, 165), 41: (1, {'@': 61})}, 5: {42: (0, 171), 43: (0, 214), 44: (0, 225)}, 6: {40: (0, 165), 34: (0, 127), 36: (0, 52), 39: (0, 220), 35: (0, 183), 41: (1, {'@': 67})}, 7: {11: (1, {'@': 176}), 5: (1, {'@': 176}), 30: (1, {'@': 176}), 25: (1, {'@': 176}), 4: (1, {'@': 176}), 2: (1, {'@': 176}), 22: (1, {'@': 176}), 15: (1, {'@': 176}), 13: (1, {'@': 176}), 29: (1, {'@': 176}), 21: (1, {'@': 176}), 10: (1, {'@': 176})}, 8: {42: (1, {'@': 142}), 45: (1, {'@': 158}), 46: (1, {'@': 158}), 47: (1, {'@': 158}), 48: (1, {'@': 158}), 43: (1, {'@': 142}), 49: (1, {'@': 142}), 50: (1, {'@': 142})}, 9: {42: (1, {'@': 208}), 49: (1, {'@': 208}), 50: (1, {'@': 208}), 45: (1, {'@': 208}), 48: (1, {'@': 208}), 43: (1, {'@': 208})}, 10: {42: (1, {'@': 125}), 43: (1, {'@': 125}), 51: (1, {'@': 125}), 52: (1, {'@': 125}), 49: (1, {'@': 125}), 50: (1, {'@': 125}), 53: (1, {'@': 125}), 45: (1, {'@': 125}), 54: (1, {'@': 125}), 48: (1, {'@': 125}), 46: (1, {'@': 125}), 47: (1, {'@': 125}), 55: (1, {'@': 125}), 56: (1, {'@': 125}), 57: (1, {'@': 125}), 58: (1, {'@': 125}), 59: (1, {'@': 125}), 60: (1, {'@': 125}), 61: (1, {'@': 125}), 62: (1, {'@': 125}), 63: (1, {'@': 125}), 64: (1, {'@': 125}), 65: (1, {'@': 125}), 66: (1, {'@': 125}), 67: (1, {'@': 125}), 68: (1, {'@': 125}), 69: (1, {'@': 125}), 70: (1, {'@': 125}), 71: (1, {'@': 125}), 29: (1, {'@': 125})}, 11: {42: (1, {'@': 115}), 43: (1, {'@': 115}), 51: (1, {'@': 115}), 52: (1, {'@': 115}), 49: (1, {'@': 115}), 50: (1, {'@': 115}), 53: (1, {'@': 115}), 45: (1, {'@': 115}), 54: (1, {'@': 115}), 48: (1, {'@': 115}), 46: (1, {'@': 115}), 47: (1, {'@': 115}), 55: (1, {'@': 115}), 56: (1, {'@': 115}), 57: (1, {'@': 115}), 58: (1, {'@': 115}), 59: (1, {'@': 115}), 60: (1, {'@': 115}), 61: (1, {'@': 115}), 62: (1, {'@': 115}), 63: (1, {'@': 115}), 64: (1, {'@': 115}), 65: (1, {'@': 115}), 66: (1, {'@': 115}), 67: (1, {'@': 115}), 68: (1, {'@': 115}), 69: (1, {'@': 115}), 70: (1, {'@': 115}), 71: (1, {'@': 115}), 29: (1, {'@': 115})}, 12: {56: (0, 184), 44: (0, 60), 43: (0, 214)}, 13: {0: (0, 11), 1: (0, 15), 2: (0, 7), 3: (0, 142), 4: (0, 221), 5: (0, 231), 6: (0, 136), 7: (0, 108), 8: (0, 76), 9: (0, 19), 12: (0, 212), 11: (0, 3), 10: (0, 93), 13: (0, 55), 14: (0, 106), 15: (0, 24), 16: (0, 125), 17: (0, 126), 18: (0, 86), 19: (0, 80), 20: (0, 71), 21: (0, 248), 22: (0, 51), 23: (0, 44), 24: (0, 97), 25: (0, 2), 26: (0, 47), 27: (0, 89), 28: (0, 234), 29: (0, 77), 30: (0, 198), 31: (0, 61), 32: (0, 182)}, 14: {42: (1, {'@': 161}), 52: (1, {'@': 161}), 49: (1, {'@': 161}), 50: (1, {'@': 161}), 45: (1, {'@': 161}), 48: (1, {'@': 161}), 46: (1, {'@': 161}), 43: (1, {'@': 161}), 47: (1, {'@': 161})}, 15: {42: (1, {'@': 195}), 43: (1, {'@': 195}), 4: (1, {'@': 195}), 51: (1, {'@': 195}), 52: (1, {'@': 195}), 49: (1, {'@': 195}), 50: (1, {'@': 195}), 53: (1, {'@': 195}), 45: (1, {'@': 195}), 54: (1, {'@': 195}), 48: (1, {'@': 195}), 46: (1, {'@': 195}), 47: (1, {'@': 195}), 69: (1, {'@': 195}), 58: (1, {'@': 195}), 59: (1, {'@': 195}), 70: (1, {'@': 195}), 62: (1, {'@': 195}), 63: (1, {'@': 195}), 71: (1, {'@': 195}), 64: (1, {'@': 195}), 56: (1, {'@': 195}), 66: (1, {'@': 195}), 67: (1, {'@': 195}), 57: (1, {'@': 195}), 60: (1, {'@': 195}), 61: (1, {'@': 195}), 65: (1, {'@': 195}), 29: (1, {'@': 195}), 55: (1, {'@': 195}), 68: (1, {'@': 195})}, 16: {43: (1, {'@': 170})}, 17: {11: (1, {'@': 193}), 30: (1, {'@': 193}), 25: (1, {'@': 193}), 2: (1, {'@': 193}), 4: (1, {'@': 193}), 22: (1, {'@': 193}), 15: (1, {'@': 193}), 13: (1, {'@': 193}), 10: (1, {'@': 193})}, 18: {42: (1, {'@': 204}), 43: (1, {'@': 204}), 56: (1, {'@': 204}), 51: (1, {'@': 204})}, 19: {0: (0, 11), 1: (0, 15), 2: (0, 7), 3: (0, 142), 4: (0, 221), 5: (0, 231), 6: (0, 136), 7: (0, 108), 8: (0, 76), 9: (0, 19), 10: (0, 93), 11: (0, 3), 13: (0, 55), 14: (0, 106), 15: (0, 24), 16: (0, 125), 17: (0, 126), 18: (0, 86), 19: (0, 80), 20: (0, 71), 21: (0, 248), 22: (0, 51), 23: (0, 44), 24: (0, 97), 25: (0, 2), 26: (0, 47), 27: (0, 89), 28: (0, 234), 12: (0, 123), 29: (0, 77), 30: (0, 198), 31: (0, 61), 32: (0, 182)}, 20: {34: (0, 127), 36: (0, 52), 35: (0, 253), 39: (0, 220), 40: (0, 165), 41: (1, {'@': 79})}, 21: {42: (1, {'@': 127}), 43: (1, {'@': 127}), 51: (1, {'@': 127}), 52: (1, {'@': 127}), 49: (1, {'@': 127}), 50: (1, {'@': 127}), 53: (1, {'@': 127}), 45: (1, {'@': 127}), 54: (1, {'@': 127}), 48: (1, {'@': 127}), 46: (1, {'@': 127}), 47: (1, {'@': 127}), 55: (1, {'@': 127}), 56: (1, {'@': 127}), 57: (1, {'@': 127}), 58: (1, {'@': 127}), 59: (1, {'@': 127}), 60: (1, {'@': 127}), 61: (1, {'@': 127}), 62: (1, {'@': 127}), 63: (1, {'@': 127}), 64: (1, {'@': 127}), 65: (1, {'@': 127}), 66: (1, {'@': 127}), 67: (1, {'@': 127}), 68: (1, {'@': 127}), 69: (1, {'@': 127}), 70: (1, {'@': 127}), 71: (1, {'@': 127}), 29: (1, {'@': 127})}, 22: {41: (1, {'@': 72})}, 23: {42: (1, {'@': 205}), 43: (1, {'@': 205}), 56: (1, {'@': 205}), 51: (1, {'@': 205})}, 24: {42: (1, {'@': 203}), 43: (1, {'@': 203}), 4: (1, {'@': 203}), 51: (1, {'@': 203}), 52: (1, {'@': 203}), 49: (1, {'@': 203}), 50: (1, {'@': 203}), 53: (1, {'@': 203}), 45: (1, {'@': 203}), 54: (1, {'@': 203}), 48: (1, {'@': 203}), 46: (1, {'@': 203}), 47: (1, {'@': 203}), 69: (1, {'@': 203}), 57: (1, {'@': 203}), 58: (1, {'@': 203}), 59: (1, {'@': 203}), 70: (1, {'@': 203}), 60: (1, {'@': 203}), 61: (1, {'@': 203}), 62: (1, {'@': 203}), 63: (1, {'@': 203}), 71: (1, {'@': 203}), 64: (1, {'@': 203}), 65: (1, {'@': 203}), 56: (1, {'@': 203}), 55: (1, {'@': 203}), 29: (1, {'@': 203}), 66: (1, {'@': 203}), 67: (1, {'@': 203}), 68: (1, {'@': 203})}, 25: {11: (1, {'@': 90}), 5: (1, {'@': 90}), 30: (1, {'@': 90}), 25: (1, {'@': 90}), 4: (1, {'@': 90}), 2: (1, {'@': 90}), 22: (1, {'@': 90}), 15: (1, {'@': 90}), 13: (1, {'@': 90}), 29: (1, {'@': 90}), 21: (1, {'@': 90}), 10: (1, {'@': 90})}, 26: {3: (0, 142), 4: (0, 221), 72: (0, 42), 73: (0, 213), 5: (0, 231), 7: (0, 108), 74: (0, 36), 9: (0, 19), 12: (0, 41), 14: (0, 106), 15: (0, 24), 21: (0, 248), 25: (0, 2), 26: (0, 47), 31: (0, 61), 11: (0, 3), 0: (0, 11), 1: (0, 15), 2: (0, 7), 6: (0, 136), 8: (0, 76), 10: (0, 93), 75: (0, 201), 13: (0, 55), 16: (0, 125), 17: (0, 126), 18: (0, 86), 19: (0, 80), 76: (0, 38), 20: (0, 71), 77: (0, 14), 22: (0, 51), 78: (0, 79), 23: (0, 44), 24: (0, 97), 79: (0, 92), 28: (0, 234), 29: (0, 77), 30: (0, 198), 27: (0, 89), 32: (0, 182)}, 27: {42: (0, 78)}, 28: {43: (0, 13)}, 29: {43: (1, {'@': 172})}, 30: {80: (1, {'@': 199}), 38: (1, {'@': 199})}, 31: {42: (1, {'@': 206}), 48: (1, {'@': 206}), 49: (1, {'@': 206}), 43: (1, {'@': 206}), 50: (1, {'@': 206})}, 32: {21: (0, 96)}, 33: {42: (1, {'@': 123}), 43: (1, {'@': 123}), 51: (1, {'@': 123}), 52: (1, {'@': 123}), 49: (1, {'@': 123}), 50: (1, {'@': 123}), 53: (1, {'@': 123}), 45: (1, {'@': 123}), 54: (1, {'@': 123}), 48: (1, {'@': 123}), 46: (1, {'@': 123}), 47: (1, {'@': 123}), 55: (1, {'@': 123}), 56: (1, {'@': 123}), 57: (1, {'@': 123}), 58: (1, {'@': 123}), 59: (1, {'@': 123}), 60: (1, {'@': 123}), 61: (1, {'@': 123}), 62: (1, {'@': 123}), 63: (1, {'@': 123}), 64: (1, {'@': 123}), 65: (1, {'@': 123}), 66: (1, {'@': 123}), 67: (1, {'@': 123}), 68: (1, {'@': 123}), 69: (1, {'@': 123}), 70: (1, {'@': 123}), 71: (1, {'@': 123}), 29: (1, {'@': 123})}, 34: {81: (0, 244), 82: (0, 262)}, 35: {41: (1, {'@': 60})}, 36: {45: (1, {'@': 155}), 42: (1, {'@': 155}), 48: (1, {'@': 155}), 49: (1, {'@': 155}), 43: (1, {'@': 155}), 50: (1, {'@': 155}), 47: (1, {'@': 155})}, 37: {41: (1, {'@': 55})}, 38: {46: (0, 83), 83: (0, 64), 45: (1, {'@': 154}), 42: (1, {'@': 154}), 48: (1, {'@': 154}), 49: (1, {'@': 154}), 43: (1, {'@': 154}), 50: (1, {'@': 154}), 47: (1, {'@': 154})}, 39: {42: (1, {'@': 182}), 43: (1, {'@': 182}), 51: (1, {'@': 182}), 52: (1, {'@': 182}), 49: (1, {'@': 182}), 50: (1, {'@': 182}), 53: (1, {'@': 182}), 45: (1, {'@': 182}), 54: (1, {'@': 182}), 48: (1, {'@': 182}), 46: (1, {'@': 182}), 47: (1, {'@': 182}), 55: (1, {'@': 182}), 56: (1, {'@': 182}), 57: (1, {'@': 182}), 58: (1, {'@': 182}), 59: (1, {'@': 182}), 60: (1, {'@': 182}), 61: (1, {'@': 182}), 62: (1, {'@': 182}), 63: (1, {'@': 182}), 64: (1, {'@': 182}), 65: (1, {'@': 182}), 66: (1, {'@': 182}), 67: (1, {'@': 182}), 68: (1, {'@': 182}), 69: (1, {'@': 182}), 70: (1, {'@': 182}), 71: (1, {'@': 182}), 29: (1, {'@': 182})}, 40: {21: (1, {'@': 198})}, 41: {53: (0, 224), 84: (0, 241), 42: (1, {'@': 163}), 52: (1, {'@': 163}), 49: (1, {'@': 163}), 50: (1, {'@': 163}), 45: (1, {'@': 163}), 54: (1, {'@': 163}), 48: (1, {'@': 163}), 46: (1, {'@': 163}), 43: (1, {'@': 163}), 47: (1, {'@': 163})}, 42: {42: (1, {'@': 164}), 52: (1, {'@': 164}), 49: (1, {'@': 164}), 50: (1, {'@': 164}), 45: (1, {'@': 164}), 54: (1, {'@': 164}), 48: (1, {'@': 164}), 46: (1, {'@': 164}), 43: (1, {'@': 164}), 47: (1, {'@': 164})}, 43: {42: (1, {'@': 82}), 43: (1, {'@': 82}), 51: (1, {'@': 82}), 52: (1, {'@': 82}), 49: (1, {'@': 82}), 50: (1, {'@': 82}), 53: (1, {'@': 82}), 45: (1, {'@': 82}), 54: (1, {'@': 82}), 48: (1, {'@': 82}), 46: (1, {'@': 82}), 47: (1, {'@': 82}), 55: (1, {'@': 82}), 56: (1, {'@': 82}), 57: (1, {'@': 82}), 58: (1, {'@': 82}), 59: (1, {'@': 82}), 60: (1, {'@': 82}), 61: (1, {'@': 82}), 62: (1, {'@': 82}), 63: (1, {'@': 82}), 64: (1, {'@': 82}), 65: (1, {'@': 82}), 66: (1, {'@': 82}), 67: (1, {'@': 82}), 68: (1, {'@': 82}), 69: (1, {'@': 82}), 70: (1, {'@': 82}), 71: (1, {'@': 82}), 29: (1, {'@': 82})}, 44: {42: (1, {'@': 106}), 43: (1, {'@': 106}), 51: (1, {'@': 106}), 52: (1, {'@': 106}), 49: (1, {'@': 106}), 50: (1, {'@': 106}), 53: (1, {'@': 106}), 45: (1, {'@': 106}), 54: (1, {'@': 106}), 48: (1, {'@': 106}), 46: (1, {'@': 106}), 47: (1, {'@': 106}), 55: (1, {'@': 106}), 56: (1, {'@': 106}), 57: (1, {'@': 106}), 58: (1, {'@': 106}), 59: (1, {'@': 106}), 60: (1, {'@': 106}), 61: (1, {'@': 106}), 62: (1, {'@': 106}), 63: (1, {'@': 106}), 64: (1, {'@': 106}), 65: (1, {'@': 106}), 66: (1, {'@': 106}), 67: (1, {'@': 106}), 68: (1, {'@': 106}), 69: (1, {'@': 106}), 70: (1, {'@': 106}), 71: (1, {'@': 106}), 29: (1, {'@': 106})}, 45: {42: (1, {'@': 129}), 43: (1, {'@': 129}), 51: (1, {'@': 129}), 52: (1, {'@': 129}), 49: (1, {'@': 129}), 50: (1, {'@': 129}), 53: (1, {'@': 129}), 45: (1, {'@': 129}), 54: (1, {'@': 129}), 48: (1, {'@': 129}), 46: (1, {'@': 129}), 47: (1, {'@': 129}), 55: (1, {'@': 129}), 56: (1, {'@': 129}), 57: (1, {'@': 129}), 58: (1, {'@': 129}), 59: (1, {'@': 129}), 60: (1, {'@': 129}), 61: (1, {'@': 129}), 62: (1, {'@': 129}), 63: (1, {'@': 129}), 64: (1, {'@': 129}), 65: (1, {'@': 129}), 66: (1, {'@': 129}), 67: (1, {'@': 129}), 68: (1, {'@': 129}), 69: (1, {'@': 129}), 70: (1, {'@': 129}), 71: (1, {'@': 129}), 29: (1, {'@': 129})}, 46: {42: (1, {'@': 130}), 43: (1, {'@': 130}), 51: (1, {'@': 130}), 52: (1, {'@': 130}), 49: (1, {'@': 130}), 50: (1, {'@': 130}), 53: (1, {'@': 130}), 45: (1, {'@': 130}), 54: (1, {'@': 130}), 48: (1, {'@': 130}), 46: (1, {'@': 130}), 47: (1, {'@': 130}), 55: (1, {'@': 130}), 56: (1, {'@': 130}), 57: (1, {'@': 130}), 58: (1, {'@': 130}), 59: (1, {'@': 130}), 60: (1, {'@': 130}), 61: (1, {'@': 130}), 62: (1, {'@': 130}), 63: (1, {'@': 130}), 64: (1, {'@': 130}), 65: (1, {'@': 130}), 66: (1, {'@': 130}), 67: (1, {'@': 130}), 68: (1, {'@': 130}), 69: (1, {'@': 130}), 70: (1, {'@': 130}), 71: (1, {'@': 130}), 29: (1, {'@': 130})}, 47: {42: (1, {'@': 194}), 43: (1, {'@': 194}), 4: (1, {'@': 194}), 51: (1, {'@': 194}), 52: (1, {'@': 194}), 49: (1, {'@': 194}), 50: (1, {'@': 194}), 53: (1, {'@': 194}), 45: (1, {'@': 194}), 54: (1, {'@': 194}), 48: (1, {'@': 194}), 46: (1, {'@': 194}), 47: (1, {'@': 194}), 69: (1, {'@': 194}), 58: (1, {'@': 194}), 59: (1, {'@': 194}), 70: (1, {'@': 194}), 62: (1, {'@': 194}), 63: (1, {'@': 194}), 71: (1, {'@': 194}), 64: (1, {'@': 194}), 56: (1, {'@': 194}), 66: (1, {'@': 194}), 67: (1, {'@': 194}), 57: (1, {'@': 194}), 60: (1, {'@': 194}), 61: (1, {'@': 194}), 65: (1, {'@': 194}), 29: (1, {'@': 194}), 55: (1, {'@': 194}), 68: (1, {'@': 194})}, 48: {38: (0, 251), 37: (0, 181), 41: (1, {'@': 59})}, 49: {42: (1, {'@': 149}), 48: (1, {'@': 149}), 49: (1, {'@': 149}), 43: (1, {'@': 149}), 50: (1, {'@': 149})}, 50: {85: (0, 88), 86: (0, 99)}, 51: {1: (0, 15), 26: (0, 47), 15: (0, 24), 10: (0, 93), 7: (0, 63)}, 52: {41: (1, {'@': 186}), 38: (1, {'@': 186})}, 53: {53: (0, 224), 42: (0, 70), 84: (0, 241), 45: (1, {'@': 163}), 52: (1, {'@': 163}), 54: (1, {'@': 163}), 48: (1, {'@': 163}), 46: (1, {'@': 163}), 47: (1, {'@': 163})}, 54: {41: (1, {'@': 189})}, 55: {11: (1, {'@': 177}), 5: (1, {'@': 177}), 30: (1, {'@': 177}), 25: (1, {'@': 177}), 4: (1, {'@': 177}), 2: (1, {'@': 177}), 22: (1, {'@': 177}), 15: (1, {'@': 177}), 13: (1, {'@': 177}), 29: (1, {'@': 177}), 21: (1, {'@': 177}), 10: (1, {'@': 177}), 43: (1, {'@': 177})}, 56: {42: (1, {'@': 145}), 48: (1, {'@': 149}), 43: (1, {'@': 145}), 49: (1, {'@': 145}), 50: (1, {'@': 145})}, 57: {87: (0, 187), 88: (0, 154)}, 58: {53: (0, 224), 84: (0, 241), 42: (0, 197), 45: (1, {'@': 163}), 52: (1, {'@': 163}), 54: (1, {'@': 163}), 48: (1, {'@': 163}), 46: (1, {'@': 163}), 47: (1, {'@': 163})}, 59: {43: (0, 107)}, 60: {56: (0, 242), 43: (0, 94)}, 61: {42: (1, {'@': 110}), 43: (1, {'@': 110}), 51: (1, {'@': 110}), 52: (1, {'@': 110}), 49: (1, {'@': 110}), 50: (1, {'@': 110}), 53: (1, {'@': 110}), 45: (1, {'@': 110}), 54: (1, {'@': 110}), 48: (1, {'@': 110}), 46: (1, {'@': 110}), 47: (1, {'@': 110}), 55: (1, {'@': 110}), 56: (1, {'@': 110}), 57: (1, {'@': 110}), 58: (1, {'@': 110}), 59: (1, {'@': 110}), 60: (1, {'@': 110}), 61: (1, {'@': 110}), 62: (1, {'@': 110}), 63: (1, {'@': 110}), 64: (1, {'@': 110}), 65: (1, {'@': 110}), 66: (1, {'@': 110}), 67: (1, {'@': 110}), 68: (1, {'@': 110}), 69: (1, {'@': 110}), 70: (1, {'@': 110}), 71: (1, {'@': 110}), 29: (1, {'@': 110})}, 62: {42: (0, 90), 44: (0, 138), 43: (0, 214), 57: (1, {'@': 106}), 58: (1, {'@': 106}), 59: (1, {'@': 106}), 60: (1, {'@': 106}), 61: (1, {'@': 106}), 49: (1, {'@': 106}), 50: (1, {'@': 106}), 62: (1, {'@': 106}), 53: (1, {'@': 106}), 45: (1, {'@': 106}), 63: (1, {'@': 106}), 54: (1, {'@': 106}), 64: (1, {'@': 106}), 65: (1, {'@': 106}), 47: (1, {'@': 106}), 52: (1, {'@': 106}), 48: (1, {'@': 106}), 66: (1, {'@': 106}), 46: (1, {'@': 106}), 67: (1, {'@': 106}), 68: (1, {'@': 106})}, 63: {42: (1, {'@': 107}), 43: (1, {'@': 107}), 51: (1, {'@': 107}), 52: (1, {'@': 107}), 49: (1, {'@': 107}), 50: (1, {'@': 107}), 53: (1, {'@': 107}), 45: (1, {'@': 107}), 54: (1, {'@': 107}), 48: (1, {'@': 107}), 46: (1, {'@': 107}), 47: (1, {'@': 107}), 55: (1, {'@': 107}), 56: (1, {'@': 107}), 57: (1, {'@': 107}), 58: (1, {'@': 107}), 59: (1, {'@': 107}), 60: (1, {'@': 107}), 61: (1, {'@': 107}), 62: (1, {'@': 107}), 63: (1, {'@': 107}), 64: (1, {'@': 107}), 65: (1, {'@': 107}), 66: (1, {'@': 107}), 67: (1, {'@': 107}), 68: (1, {'@': 107}), 69: (1, {'@': 107}), 70: (1, {'@': 107}), 71: (1, {'@': 107}), 29: (1, {'@': 107})}, 64: {46: (0, 237), 45: (1, {'@': 156}), 42: (1, {'@': 156}), 48: (1, {'@': 156}), 49: (1, {'@': 156}), 43: (1, {'@': 156}), 50: (1, {'@': 156}), 47: (1, {'@': 156})}, 65: {48: (0, 218), 42: (1, {'@': 147}), 43: (1, {'@': 147}), 49: (1, {'@': 147}), 50: (1, {'@': 147})}, 66: {54: (0, 254), 42: (1, {'@': 162}), 52: (1, {'@': 162}), 49: (1, {'@': 162}), 50: (1, {'@': 162}), 45: (1, {'@': 162}), 48: (1, {'@': 162}), 46: (1, {'@': 162}), 43: (1, {'@': 162}), 47: (1, {'@': 162})}, 67: {41: (1, {'@': 74})}, 68: {58: (0, 193), 59: (0, 260), 62: (0, 227), 65: (0, 149), 60: (0, 153), 68: (0, 25), 64: (0, 199), 66: (0, 170), 57: (0, 200), 67: (0, 156), 63: (0, 255), 61: (0, 177), 89: (0, 91)}, 69: {53: (0, 224), 84: (0, 241), 42: (0, 208), 45: (1, {'@': 163}), 52: (1, {'@': 163}), 54: (1, {'@': 163}), 48: (1, {'@': 163}), 46: (1, {'@': 163}), 47: (1, {'@': 163})}, 70: {42: (1, {'@': 134}), 43: (1, {'@': 134}), 51: (1, {'@': 134}), 52: (1, {'@': 134}), 49: (1, {'@': 134}), 50: (1, {'@': 134}), 53: (1, {'@': 134}), 45: (1, {'@': 134}), 54: (1, {'@': 134}), 48: (1, {'@': 134}), 46: (1, {'@': 134}), 47: (1, {'@': 134}), 55: (1, {'@': 134}), 56: (1, {'@': 134}), 57: (1, {'@': 134}), 58: (1, {'@': 134}), 59: (1, {'@': 134}), 60: (1, {'@': 134}), 61: (1, {'@': 134}), 62: (1, {'@': 134}), 63: (1, {'@': 134}), 64: (1, {'@': 134}), 65: (1, {'@': 134}), 66: (1, {'@': 134}), 67: (1, {'@': 134}), 68: (1, {'@': 134}), 69: (1, {'@': 134}), 70: (1, {'@': 134}), 71: (1, {'@': 134}), 29: (1, {'@': 134})}, 71: {42: (1, {'@': 102}), 43: (1, {'@': 102}), 51: (1, {'@': 102}), 52: (1, {'@': 102}), 49: (1, {'@': 102}), 50: (1, {'@': 102}), 53: (1, {'@': 102}), 45: (1, {'@': 102}), 54: (1, {'@': 102}), 48: (1, {'@': 102}), 46: (1, {'@': 102}), 47: (1, {'@': 102}), 55: (1, {'@': 102}), 56: (1, {'@': 102}), 57: (1, {'@': 102}), 58: (1, {'@': 102}), 59: (1, {'@': 102}), 60: (1, {'@': 102}), 61: (1, {'@': 102}), 62: (1, {'@': 102}), 63: (1, {'@': 102}), 64: (1, {'@': 102}), 65: (1, {'@': 102}), 66: (1, {'@': 102}), 67: (1, {'@': 102}), 68: (1, {'@': 102}), 69: (1, {'@': 102}), 70: (1, {'@': 102}), 71: (1, {'@': 102}), 29: (1, {'@': 102})}, 72: {38: (0, 167), 80: (0, 194)}, 73: {42: (1, {'@': 214}), 52: (1, {'@': 214}), 49: (1, {'@': 214}), 50: (1, {'@': 214}), 45: (1, {'@': 214}), 48: (1, {'@': 214}), 46: (1, {'@': 214}), 43: (1, {'@': 214}), 47: (1, {'@': 214})}, 74: {42: (1, {'@': 132}), 43: (1, {'@': 132}), 51: (1, {'@': 132}), 52: (1, {'@': 132}), 49: (1, {'@': 132}), 50: (1, {'@': 132}), 53: (1, {'@': 132}), 45: (1, {'@': 132}), 54: (1, {'@': 132}), 48: (1, {'@': 132}), 46: (1, {'@': 132}), 47: (1, {'@': 132}), 55: (1, {'@': 132}), 56: (1, {'@': 132}), 57: (1, {'@': 132}), 58: (1, {'@': 132}), 59: (1, {'@': 132}), 60: (1, {'@': 132}), 61: (1, {'@': 132}), 62: (1, {'@': 132}), 63: (1, {'@': 132}), 64: (1, {'@': 132}), 65: (1, {'@': 132}), 66: (1, {'@': 132}), 67: (1, {'@': 132}), 68: (1, {'@': 132}), 69: (1, {'@': 132}), 70: (1, {'@': 132}), 71: (1, {'@': 132}), 29: (1, {'@': 132})}, 75: {42: (0, 95), 43: (0, 214), 44: (0, 101)}, 76: {42: (1, {'@': 114}), 43: (1, {'@': 114}), 51: (1, {'@': 114}), 52: (1, {'@': 114}), 49: (1, {'@': 114}), 50: (1, {'@': 114}), 53: (1, {'@': 114}), 45: (1, {'@': 114}), 54: (1, {'@': 114}), 48: (1, {'@': 114}), 46: (1, {'@': 114}), 47: (1, {'@': 114}), 55: (1, {'@': 114}), 56: (1, {'@': 114}), 57: (1, {'@': 114}), 58: (1, {'@': 114}), 59: (1, {'@': 114}), 60: (1, {'@': 114}), 61: (1, {'@': 114}), 62: (1, {'@': 114}), 63: (1, {'@': 114}), 64: (1, {'@': 114}), 65: (1, {'@': 114}), 66: (1, {'@': 114}), 67: (1, {'@': 114}), 68: (1, {'@': 114}), 69: (1, {'@': 114}), 70: (1, {'@': 114}), 71: (1, {'@': 114}), 29: (1, {'@': 114})}, 77: {7: (0, 39), 1: (0, 15), 26: (0, 47), 10: (0, 93), 15: (0, 24)}, 78: {42: (1, {'@': 135}), 43: (1, {'@': 135}), 51: (1, {'@': 135}), 52: (1, {'@': 135}), 49: (1, {'@': 135}), 50: (1, {'@': 135}), 53: (1, {'@': 135}), 45: (1, {'@': 135}), 54: (1, {'@': 135}), 48: (1, {'@': 135}), 46: (1, {'@': 135}), 47: (1, {'@': 135}), 55: (1, {'@': 135}), 56: (1, {'@': 135}), 57: (1, {'@': 135}), 58: (1, {'@': 135}), 59: (1, {'@': 135}), 60: (1, {'@': 135}), 61: (1, {'@': 135}), 62: (1, {'@': 135}), 63: (1, {'@': 135}), 64: (1, {'@': 135}), 65: (1, {'@': 135}), 66: (1, {'@': 135}), 67: (1, {'@': 135}), 68: (1, {'@': 135}), 69: (1, {'@': 135}), 70: (1, {'@': 135}), 71: (1, {'@': 135}), 29: (1, {'@': 135})}, 79: {90: (0, 66), 54: (0, 134), 42: (1, {'@': 160}), 52: (1, {'@': 160}), 49: (1, {'@': 160}), 50: (1, {'@': 160}), 45: (1, {'@': 160}), 48: (1, {'@': 160}), 46: (1, {'@': 160}), 43: (1, {'@': 160}), 47: (1, {'@': 160})}, 80: {42: (1, {'@': 109}), 43: (1, {'@': 109}), 51: (1, {'@': 109}), 52: (1, {'@': 109}), 49: (1, {'@': 109}), 50: (1, {'@': 109}), 53: (1, {'@': 109}), 45: (1, {'@': 109}), 54: (1, {'@': 109}), 48: (1, {'@': 109}), 46: (1, {'@': 109}), 47: (1, {'@': 109}), 55: (1, {'@': 109}), 56: (1, {'@': 109}), 57: (1, {'@': 109}), 58: (1, {'@': 109}), 59: (1, {'@': 109}), 60: (1, {'@': 109}), 61: (1, {'@': 109}), 62: (1, {'@': 109}), 63: (1, {'@': 109}), 64: (1, {'@': 109}), 65: (1, {'@': 109}), 66: (1, {'@': 109}), 67: (1, {'@': 109}), 68: (1, {'@': 109}), 69: (1, {'@': 109}), 70: (1, {'@': 109}), 71: (1, {'@': 109}), 29: (1, {'@': 109})}, 81: {45: (0, 119), 91: (0, 82), 48: (1, {'@': 148}), 42: (1, {'@': 148}), 49: (1, {'@': 148}), 43: (1, {'@': 148}), 50: (1, {'@': 148})}, 82: {45: (0, 185), 42: (1, {'@': 150}), 48: (1, {'@': 150}), 43: (1, {'@': 150}), 49: (1, {'@': 150}), 50: (1, {'@': 150})}, 83: {3: (0, 142), 4: (0, 221), 72: (0, 42), 73: (0, 213), 5: (0, 231), 7: (0, 108), 9: (0, 19), 76: (0, 202), 12: (0, 41), 14: (0, 106), 15: (0, 24), 21: (0, 248), 25: (0, 2), 26: (0, 47), 31: (0, 61), 11: (0, 3), 0: (0, 11), 1: (0, 15), 2: (0, 7), 6: (0, 136), 8: (0, 76), 10: (0, 93), 13: (0, 55), 16: (0, 125), 17: (0, 126), 18: (0, 86), 19: (0, 80), 20: (0, 71), 77: (0, 14), 22: (0, 51), 78: (0, 79), 23: (0, 44), 24: (0, 97), 79: (0, 92), 28: (0, 234), 29: (0, 77), 30: (0, 198), 27: (0, 89), 32: (0, 182)}, 84: {}, 85: {42: (1, {'@': 209}), 49: (1, {'@': 209}), 50: (1, {'@': 209}), 45: (1, {'@': 209}), 48: (1, {'@': 209}), 43: (1, {'@': 209})}, 86: {42: (1, {'@': 100}), 43: (1, {'@': 100}), 51: (1, {'@': 100}), 52: (1, {'@': 100}), 49: (1, {'@': 100}), 50: (1, {'@': 100}), 53: (1, {'@': 100}), 45: (1, {'@': 100}), 54: (1, {'@': 100}), 48: (1, {'@': 100}), 46: (1, {'@': 100}), 47: (1, {'@': 100}), 55: (1, {'@': 100}), 56: (1, {'@': 100}), 57: (1, {'@': 100}), 58: (1, {'@': 100}), 59: (1, {'@': 100}), 60: (1, {'@': 100}), 61: (1, {'@': 100}), 62: (1, {'@': 100}), 63: (1, {'@': 100}), 64: (1, {'@': 100}), 65: (1, {'@': 100}), 66: (1, {'@': 100}), 67: (1, {'@': 100}), 68: (1, {'@': 100}), 69: (1, {'@': 100}), 70: (1, {'@': 100}), 71: (1, {'@': 100}), 29: (1, {'@': 100})}, 87: {41: (1, {'@': 62})}, 88: {38: (0, 111)}, 89: {42: (1, {'@': 105}), 43: (1, {'@': 105}), 51: (1, {'@': 105}), 52: (1, {'@': 105}), 49: (1, {'@': 105}), 50: (1, {'@': 105}), 53: (1, {'@': 105}), 45: (1, {'@': 105}), 54: (1, {'@': 105}), 48: (1, {'@': 105}), 46: (1, {'@': 105}), 47: (1, {'@': 105}), 55: (1, {'@': 105}), 56: (1, {'@': 105}), 57: (1, {'@': 105}), 58: (1, {'@': 105}), 59: (1, {'@': 105}), 60: (1, {'@': 105}), 61: (1, {'@': 105}), 62: (1, {'@': 105}), 63: (1, {'@': 105}), 64: (1, {'@': 105}), 65: (1, {'@': 105}), 66: (1, {'@': 105}), 67: (1, {'@': 105}), 68: (1, {'@': 105}), 69: (1, {'@': 105}), 70: (1, {'@': 105}), 71: (1, {'@': 105}), 29: (1, {'@': 105})}, 90: {42: (1, {'@': 85}), 43: (1, {'@': 85}), 51: (1, {'@': 85}), 52: (1, {'@': 85}), 49: (1, {'@': 85}), 50: (1, {'@': 85}), 53: (1, {'@': 85}), 45: (1, {'@': 85}), 54: (1, {'@': 85}), 48: (1, {'@': 85}), 46: (1, {'@': 85}), 47: (1, {'@': 85}), 55: (1, {'@': 85}), 56: (1, {'@': 85}), 57: (1, {'@': 85}), 58: (1, {'@': 85}), 59: (1, {'@': 85}), 60: (1, {'@': 85}), 61: (1, {'@': 85}), 62: (1, {'@': 85}), 63: (1, {'@': 85}), 64: (1, {'@': 85}), 65: (1, {'@': 85}), 66: (1, {'@': 85}), 67: (1, {'@': 85}), 68: (1, {'@': 85}), 69: (1, {'@': 85}), 70: (1, {'@': 85}), 71: (1, {'@': 85}), 29: (1, {'@': 85})}, 91: {0: (0, 11), 1: (0, 15), 2: (0, 7), 3: (0, 142), 4: (0, 221), 5: (0, 231), 6: (0, 136), 7: (0, 108), 8: (0, 76), 9: (0, 19), 10: (0, 93), 13: (0, 55), 14: (0, 106), 15: (0, 24), 16: (0, 125), 17: (0, 126), 18: (0, 86), 19: (0, 80), 20: (0, 71), 21: (0, 248), 22: (0, 51), 23: (0, 44), 24: (0, 97), 25: (0, 2), 26: (0, 47), 27: (0, 89), 28: (0, 234), 29: (0, 77), 30: (0, 198), 12: (0, 233), 31: (0, 61), 32: (0, 182), 11: (0, 3)}, 92: {42: (1, {'@': 158}), 49: (1, {'@': 158}), 50: (1, {'@': 158}), 45: (1, {'@': 158}), 48: (1, {'@': 158}), 46: (1, {'@': 158}), 43: (1, {'@': 158}), 47: (1, {'@': 158})}, 93: {42: (1, {'@': 202}), 43: (1, {'@': 202}), 4: (1, {'@': 202}), 51: (1, {'@': 202}), 52: (1, {'@': 202}), 49: (1, {'@': 202}), 50: (1, {'@': 202}), 53: (1, {'@': 202}), 45: (1, {'@': 202}), 54: (1, {'@': 202}), 48: (1, {'@': 202}), 46: (1, {'@': 202}), 47: (1, {'@': 202}), 69: (1, {'@': 202}), 57: (1, {'@': 202}), 58: (1, {'@': 202}), 59: (1, {'@': 202}), 70: (1, {'@': 202}), 60: (1, {'@': 202}), 61: (1, {'@': 202}), 62: (1, {'@': 202}), 63: (1, {'@': 202}), 71: (1, {'@': 202}), 64: (1, {'@': 202}), 65: (1, {'@': 202}), 56: (1, {'@': 202}), 55: (1, {'@': 202}), 29: (1, {'@': 202}), 66: (1, {'@': 202}), 67: (1, {'@': 202}), 68: (1, {'@': 202})}, 94: {0: (0, 11), 1: (0, 15), 2: (0, 7), 3: (0, 142), 4: (0, 221), 5: (0, 231), 6: (0, 136), 7: (0, 108), 8: (0, 76), 9: (0, 19), 10: (0, 93), 12: (0, 23), 13: (0, 55), 14: (0, 106), 15: (0, 24), 16: (0, 125), 17: (0, 126), 18: (0, 86), 19: (0, 80), 20: (0, 71), 21: (0, 248), 22: (0, 51), 23: (0, 44), 24: (0, 97), 25: (0, 2), 26: (0, 47), 27: (0, 89), 28: (0, 234), 29: (0, 77), 30: (0, 198), 31: (0, 61), 32: (0, 182), 11: (0, 3)}, 95: {42: (1, {'@': 131}), 43: (1, {'@': 131}), 51: (1, {'@': 131}), 52: (1, {'@': 131}), 49: (1, {'@': 131}), 50: (1, {'@': 131}), 53: (1, {'@': 131}), 45: (1, {'@': 131}), 54: (1, {'@': 131}), 48: (1, {'@': 131}), 46: (1, {'@': 131}), 47: (1, {'@': 131}), 55: (1, {'@': 131}), 56: (1, {'@': 131}), 57: (1, {'@': 131}), 58: (1, {'@': 131}), 59: (1, {'@': 131}), 60: (1, {'@': 131}), 61: (1, {'@': 131}), 62: (1, {'@': 131}), 63: (1, {'@': 131}), 64: (1, {'@': 131}), 65: (1, {'@': 131}), 66: (1, {'@': 131}), 67: (1, {'@': 131}), 68: (1, {'@': 131}), 69: (1, {'@': 131}), 70: (1, {'@': 131}), 71: (1, {'@': 131}), 29: (1, {'@': 131})}, 96: {11: (1, {'@': 191}), 30: (1, {'@': 191}), 25: (1, {'@': 191}), 2: (1, {'@': 191}), 4: (1, {'@': 191}), 22: (1, {'@': 191}), 15: (1, {'@': 191}), 13: (1, {'@': 191}), 10: (1, {'@': 191})}, 97: {42: (1, {'@': 112}), 43: (1, {'@': 112}), 51: (1, {'@': 112}), 52: (1, {'@': 112}), 49: (1, {'@': 112}), 50: (1, {'@': 112}), 53: (1, {'@': 112}), 45: (1, {'@': 112}), 54: (1, {'@': 112}), 48: (1, {'@': 112}), 46: (1, {'@': 112}), 47: (1, {'@': 112}), 55: (1, {'@': 112}), 56: (1, {'@': 112}), 57: (1, {'@': 112}), 58: (1, {'@': 112}), 59: (1, {'@': 112}), 60: (1, {'@': 112}), 61: (1, {'@': 112}), 62: (1, {'@': 112}), 63: (1, {'@': 112}), 64: (1, {'@': 112}), 65: (1, {'@': 112}), 66: (1, {'@': 112}), 67: (1, {'@': 112}), 68: (1, {'@': 112}), 69: (1, {'@': 112}), 70: (1, {'@': 112}), 71: (1, {'@': 112}), 29: (1, {'@': 112})}, 98: {42: (1, {'@': 146}), 43: (1, {'@': 146}), 49: (1, {'@': 146}), 50: (1, {'@': 146})}, 99: {38: (1, {'@': 201})}, 100: {42: (1, {'@': 126}), 43: (1, {'@': 126}), 51: (1, {'@': 126}), 52: (1, {'@': 126}), 49: (1, {'@': 126}), 50: (1, {'@': 126}), 53: (1, {'@': 126}), 45: (1, {'@': 126}), 54: (1, {'@': 126}), 48: (1, {'@': 126}), 46: (1, {'@': 126}), 47: (1, {'@': 126}), 55: (1, {'@': 126}), 56: (1, {'@': 126}), 57: (1, {'@': 126}), 58: (1, {'@': 126}), 59: (1, {'@': 126}), 60: (1, {'@': 126}), 61: (1, {'@': 126}), 62: (1, {'@': 126}), 63: (1, {'@': 126}), 64: (1, {'@': 126}), 65: (1, {'@': 126}), 66: (1, {'@': 126}), 67: (1, {'@': 126}), 68: (1, {'@': 126}), 69: (1, {'@': 126}), 70: (1, {'@': 126}), 71: (1, {'@': 126}), 29: (1, {'@': 126})}, 101: {42: (0, 46), 43: (0, 94)}, 102: {0: (0, 11), 43: (0, 124), 1: (0, 15), 2: (0, 7), 3: (0, 142), 4: (0, 221), 5: (0, 231), 12: (0, 219), 6: (0, 136), 7: (0, 108), 8: (0, 76), 9: (0, 19), 10: (0, 93), 13: (0, 55), 14: (0, 106), 15: (0, 24), 16: (0, 125), 17: (0, 126), 18: (0, 86), 19: (0, 80), 20: (0, 71), 21: (0, 248), 22: (0, 51), 23: (0, 44), 24: (0, 97), 25: (0, 2), 26: (0, 47), 27: (0, 89), 28: (0, 234), 29: (0, 77), 30: (0, 198), 31: (0, 61), 32: (0, 182), 11: (0, 3)}, 103: {49: (1, {'@': 216}), 50: (1, {'@': 216}), 45: (1, {'@': 216}), 54: (1, {'@': 216}), 47: (1, {'@': 216}), 42: (1, {'@': 216}), 52: (1, {'@': 216}), 48: (1, {'@': 216}), 46: (1, {'@': 216}), 43: (1, {'@': 216})}, 104: {42: (0, 186)}, 105: {43: (0, 210)}, 106: {42: (1, {'@': 111}), 43: (1, {'@': 111}), 51: (1, {'@': 111}), 52: (1, {'@': 111}), 49: (1, {'@': 111}), 50: (1, {'@': 111}), 53: (1, {'@': 111}), 45: (1, {'@': 111}), 54: (1, {'@': 111}), 48: (1, {'@': 111}), 46: (1, {'@': 111}), 47: (1, {'@': 111}), 55: (1, {'@': 111}), 56: (1, {'@': 111}), 57: (1, {'@': 111}), 58: (1, {'@': 111}), 59: (1, {'@': 111}), 60: (1, {'@': 111}), 61: (1, {'@': 111}), 62: (1, {'@': 111}), 63: (1, {'@': 111}), 64: (1, {'@': 111}), 65: (1, {'@': 111}), 66: (1, {'@': 111}), 67: (1, {'@': 111}), 68: (1, {'@': 111}), 69: (1, {'@': 111}), 70: (1, {'@': 111}), 71: (1, {'@': 111}), 29: (1, {'@': 111})}, 107: {0: (0, 11), 1: (0, 15), 2: (0, 7), 3: (0, 142), 4: (0, 221), 5: (0, 231), 6: (0, 136), 7: (0, 108), 8: (0, 76), 9: (0, 19), 10: (0, 93), 13: (0, 55), 14: (0, 106), 15: (0, 24), 16: (0, 125), 17: (0, 126), 18: (0, 86), 19: (0, 80), 12: (0, 229), 20: (0, 71), 21: (0, 248), 22: (0, 51), 23: (0, 44), 24: (0, 97), 25: (0, 2), 26: (0, 47), 27: (0, 89), 28: (0, 234), 29: (0, 77), 30: (0, 198), 31: (0, 61), 32: (0, 182), 11: (0, 3)}, 108: {4: (0, 232), 42: (1, {'@': 103}), 43: (1, {'@': 103}), 51: (1, {'@': 103}), 52: (1, {'@': 103}), 49: (1, {'@': 103}), 50: (1, {'@': 103}), 53: (1, {'@': 103}), 45: (1, {'@': 103}), 54: (1, {'@': 103}), 48: (1, {'@': 103}), 46: (1, {'@': 103}), 47: (1, {'@': 103}), 55: (1, {'@': 103}), 56: (1, {'@': 103}), 57: (1, {'@': 103}), 58: (1, {'@': 103}), 59: (1, {'@': 103}), 60: (1, {'@': 103}), 61: (1, {'@': 103}), 62: (1, {'@': 103}), 63: (1, {'@': 103}), 64: (1, {'@': 103}), 65: (1, {'@': 103}), 66: (1, {'@': 103}), 67: (1, {'@': 103}), 68: (1, {'@': 103}), 69: (1, {'@': 103}), 70: (1, {'@': 103}), 71: (1, {'@': 103}), 29: (1, {'@': 103})}, 109: {43: (0, 1)}, 110: {38: (0, 251), 37: (0, 87), 41: (1, {'@': 63})}, 111: {41: (1, {'@': 188})}, 112: {70: (0, 189), 29: (0, 6), 69: (0, 4), 71: (0, 20)}, 113: {41: (1, {'@': 80})}, 114: {42: (0, 238)}, 115: {43: (1, {'@': 168})}, 116: {45: (1, {'@': 164}), 52: (1, {'@': 164}), 54: (1, {'@': 164}), 48: (1, {'@': 164}), 46: (1, {'@': 164}), 47: (1, {'@': 164}), 42: (1, {'@': 140}), 43: (1, {'@': 140}), 49: (1, {'@': 140}), 50: (1, {'@': 140})}, 117: {45: (1, {'@': 152}), 42: (1, {'@': 152}), 48: (1, {'@': 152}), 49: (1, {'@': 152}), 43: (1, {'@': 152}), 50: (1, {'@': 152})}, 118: {92: (0, 130), 47: (0, 26), 45: (1, {'@': 151}), 42: (1, {'@': 151}), 48: (1, {'@': 151}), 49: (1, {'@': 151}), 43: (1, {'@': 151}), 50: (1, {'@': 151})}, 119: {3: (0, 142), 4: (0, 221), 72: (0, 42), 73: (0, 213), 5: (0, 231), 7: (0, 108), 74: (0, 36), 9: (0, 19), 12: (0, 41), 14: (0, 106), 15: (0, 24), 21: (0, 248), 25: (0, 2), 26: (0, 47), 93: (0, 9), 31: (0, 61), 11: (0, 3), 0: (0, 11), 1: (0, 15), 2: (0, 7), 6: (0, 136), 8: (0, 76), 10: (0, 93), 75: (0, 118), 13: (0, 55), 16: (0, 125), 17: (0, 126), 18: (0, 86), 19: (0, 80), 76: (0, 38), 20: (0, 71), 77: (0, 14), 22: (0, 51), 78: (0, 79), 23: (0, 44), 24: (0, 97), 79: (0, 92), 28: (0, 234), 94: (0, 117), 29: (0, 77), 30: (0, 198), 27: (0, 89), 32: (0, 182)}, 120: {0: (0, 11), 1: (0, 15), 2: (0, 7), 3: (0, 142), 4: (0, 221), 12: (0, 145), 5: (0, 231), 6: (0, 136), 7: (0, 108), 8: (0, 76), 9: (0, 19), 10: (0, 93), 13: (0, 55), 14: (0, 106), 15: (0, 24), 16: (0, 125), 17: (0, 126), 18: (0, 86), 19: (0, 80), 20: (0, 71), 21: (0, 248), 22: (0, 51), 23: (0, 44), 24: (0, 97), 25: (0, 2), 26: (0, 47), 27: (0, 89), 28: (0, 234), 29: (0, 77), 30: (0, 198), 31: (0, 61), 32: (0, 182), 11: (0, 3)}, 121: {53: (0, 224), 84: (0, 241), 42: (0, 74), 45: (1, {'@': 163}), 52: (1, {'@': 163}), 54: (1, {'@': 163}), 48: (1, {'@': 163}), 46: (1, {'@': 163}), 47: (1, {'@': 163})}, 122: {11: (1, {'@': 174}), 5: (1, {'@': 174}), 10: (1, {'@': 174}), 30: (1, {'@': 174}), 25: (1, {'@': 174}), 4: (1, {'@': 174}), 2: (1, {'@': 174}), 22: (1, {'@': 174}), 15: (1, {'@': 174}), 13: (1, {'@': 174}), 29: (1, {'@': 174}), 21: (1, {'@': 174}), 43: (1, {'@': 174})}, 123: {44: (0, 163), 43: (0, 214), 51: (0, 131)}, 124: {0: (0, 11), 1: (0, 15), 2: (0, 7), 3: (0, 142), 4: (0, 221), 5: (0, 231), 6: (0, 136), 7: (0, 108), 8: (0, 76), 9: (0, 19), 10: (0, 93), 13: (0, 55), 14: (0, 106), 15: (0, 24), 16: (0, 125), 17: (0, 126), 18: (0, 86), 19: (0, 80), 20: (0, 71), 21: (0, 248), 12: (0, 174), 22: (0, 51), 23: (0, 44), 24: (0, 97), 25: (0, 2), 26: (0, 47), 27: (0, 89), 28: (0, 234), 29: (0, 77), 30: (0, 198), 31: (0, 61), 32: (0, 182), 11: (0, 3)}, 125: {0: (0, 11), 1: (0, 15), 2: (0, 7), 3: (0, 142), 4: (0, 221), 5: (0, 231), 12: (0, 219), 6: (0, 136), 7: (0, 108), 8: (0, 76), 9: (0, 19), 10: (0, 93), 13: (0, 55), 14: (0, 106), 15: (0, 24), 16: (0, 125), 17: (0, 126), 18: (0, 86), 19: (0, 80), 20: (0, 71), 21: (0, 248), 22: (0, 51), 23: (0, 44), 24: (0, 97), 25: (0, 2), 26: (0, 47), 27: (0, 89), 28: (0, 234), 29: (0, 77), 30: (0, 198), 31: (0, 61), 32: (0, 182), 11: (0, 3)}, 126: {42: (1, {'@': 101}), 43: (1, {'@': 101}), 51: (1, {'@': 101}), 52: (1, {'@': 101}), 49: (1, {'@': 101}), 50: (1, {'@': 101}), 53: (1, {'@': 101}), 45: (1, {'@': 101}), 54: (1, {'@': 101}), 48: (1, {'@': 101}), 46: (1, {'@': 101}), 47: (1, {'@': 101}), 55: (1, {'@': 101}), 56: (1, {'@': 101}), 57: (1, {'@': 101}), 58: (1, {'@': 101}), 59: (1, {'@': 101}), 60: (1, {'@': 101}), 61: (1, {'@': 101}), 62: (1, {'@': 101}), 63: (1, {'@': 101}), 64: (1, {'@': 101}), 65: (1, {'@': 101}), 66: (1, {'@': 101}), 67: (1, {'@': 101}), 68: (1, {'@': 101}), 69: (1, {'@': 101}), 70: (1, {'@': 101}), 71: (1, {'@': 101}), 29: (1, {'@': 101})}, 127: {33: (0, 211)}, 128: {38: (0, 251), 37: (0, 160), 95: (0, 247), 41: (1, {'@': 71})}, 129: {11: (1, {'@': 173}), 5: (1, {'@': 173}), 10: (1, {'@': 173}), 30: (1, {'@': 173}), 25: (1, {'@': 173}), 4: (1, {'@': 173}), 2: (1, {'@': 173}), 22: (1, {'@': 173}), 15: (1, {'@': 173}), 13: (1, {'@': 173}), 29: (1, {'@': 173}), 21: (1, {'@': 173}), 43: (1, {'@': 173})}, 130: {47: (0, 161), 45: (1, {'@': 153}), 42: (1, {'@': 153}), 48: (1, {'@': 153}), 49: (1, {'@': 153}), 43: (1, {'@': 153}), 50: (1, {'@': 153})}, 131: {42: (1, {'@': 118}), 43: (1, {'@': 118}), 51: (1, {'@': 118}), 52: (1, {'@': 118}), 49: (1, {'@': 118}), 50: (1, {'@': 118}), 53: (1, {'@': 118}), 45: (1, {'@': 118}), 54: (1, {'@': 118}), 48: (1, {'@': 118}), 46: (1, {'@': 118}), 47: (1, {'@': 118}), 55: (1, {'@': 118}), 56: (1, {'@': 118}), 57: (1, {'@': 118}), 58: (1, {'@': 118}), 59: (1, {'@': 118}), 60: (1, {'@': 118}), 61: (1, {'@': 118}), 62: (1, {'@': 118}), 63: (1, {'@': 118}), 64: (1, {'@': 118}), 65: (1, {'@': 118}), 66: (1, {'@': 118}), 67: (1, {'@': 118}), 68: (1, {'@': 118}), 69: (1, {'@': 118}), 70: (1, {'@': 118}), 71: (1, {'@': 118}), 29: (1, {'@': 118})}, 132: {43: (1, {'@': 166})}, 133: {42: (1, {'@': 141}), 45: (1, {'@': 161}), 52: (1, {'@': 161}), 48: (1, {'@': 161}), 46: (1, {'@': 161}), 47: (1, {'@': 161}), 43: (1, {'@': 141}), 49: (1, {'@': 141}), 50: (1, {'@': 141})}, 134: {0: (0, 11), 1: (0, 15), 2: (0, 7), 12: (0, 41), 3: (0, 142), 4: (0, 221), 72: (0, 42), 5: (0, 231), 6: (0, 136), 7: (0, 108), 8: (0, 76), 9: (0, 19), 10: (0, 93), 13: (0, 55), 14: (0, 106), 15: (0, 24), 16: (0, 125), 17: (0, 126), 18: (0, 86), 19: (0, 80), 20: (0, 71), 21: (0, 248), 22: (0, 51), 23: (0, 44), 24: (0, 97), 25: (0, 2), 26: (0, 47), 27: (0, 89), 28: (0, 234), 29: (0, 77), 30: (0, 198), 31: (0, 61), 78: (0, 103), 32: (0, 182), 11: (0, 3)}, 135: {49: (1, {'@': 218}), 50: (1, {'@': 218}), 53: (1, {'@': 218}), 45: (1, {'@': 218}), 54: (1, {'@': 218}), 47: (1, {'@': 218}), 42: (1, {'@': 218}), 52: (1, {'@': 218}), 48: (1, {'@': 218}), 46: (1, {'@': 218}), 43: (1, {'@': 218})}, 136: {0: (0, 11), 1: (0, 15), 2: (0, 7), 3: (0, 142), 4: (0, 221), 5: (0, 231), 6: (0, 136), 7: (0, 108), 8: (0, 76), 9: (0, 19), 10: (0, 93), 11: (0, 3), 13: (0, 55), 14: (0, 106), 15: (0, 24), 16: (0, 125), 17: (0, 126), 18: (0, 86), 19: (0, 80), 20: (0, 71), 21: (0, 248), 22: (0, 51), 23: (0, 44), 24: (0, 97), 25: (0, 2), 26: (0, 47), 12: (0, 12), 27: (0, 89), 28: (0, 234), 29: (0, 77), 30: (0, 198), 31: (0, 61), 32: (0, 182)}, 137: {43: (1, {'@': 171})}, 138: {42: (0, 152), 43: (0, 94)}, 139: {96: (0, 206), 42: (0, 140), 50: (0, 122), 49: (0, 129)}, 140: {42: (1, {'@': 128}), 43: (1, {'@': 128}), 51: (1, {'@': 128}), 52: (1, {'@': 128}), 49: (1, {'@': 128}), 50: (1, {'@': 128}), 53: (1, {'@': 128}), 45: (1, {'@': 128}), 54: (1, {'@': 128}), 48: (1, {'@': 128}), 46: (1, {'@': 128}), 47: (1, {'@': 128}), 55: (1, {'@': 128}), 56: (1, {'@': 128}), 57: (1, {'@': 128}), 58: (1, {'@': 128}), 59: (1, {'@': 128}), 60: (1, {'@': 128}), 61: (1, {'@': 128}), 62: (1, {'@': 128}), 63: (1, {'@': 128}), 64: (1, {'@': 128}), 65: (1, {'@': 128}), 66: (1, {'@': 128}), 67: (1, {'@': 128}), 68: (1, {'@': 128}), 69: (1, {'@': 128}), 70: (1, {'@': 128}), 71: (1, {'@': 128}), 29: (1, {'@': 128})}, 141: {42: (0, 230)}, 142: {42: (1, {'@': 113}), 43: (1, {'@': 113}), 51: (1, {'@': 113}), 52: (1, {'@': 113}), 49: (1, {'@': 113}), 50: (1, {'@': 113}), 53: (1, {'@': 113}), 45: (1, {'@': 113}), 54: (1, {'@': 113}), 48: (1, {'@': 113}), 46: (1, {'@': 113}), 47: (1, {'@': 113}), 55: (1, {'@': 113}), 56: (1, {'@': 113}), 57: (1, {'@': 113}), 58: (1, {'@': 113}), 59: (1, {'@': 113}), 60: (1, {'@': 113}), 61: (1, {'@': 113}), 62: (1, {'@': 113}), 63: (1, {'@': 113}), 64: (1, {'@': 113}), 65: (1, {'@': 113}), 66: (1, {'@': 113}), 67: (1, {'@': 113}), 68: (1, {'@': 113}), 69: (1, {'@': 113}), 70: (1, {'@': 113}), 71: (1, {'@': 113}), 29: (1, {'@': 113})}, 143: {78: (0, 79), 94: (0, 155), 3: (0, 142), 4: (0, 221), 97: (0, 141), 72: (0, 116), 73: (0, 213), 5: (0, 231), 7: (0, 108), 74: (0, 144), 9: (0, 19), 14: (0, 106), 12: (0, 121), 15: (0, 24), 21: (0, 248), 25: (0, 2), 26: (0, 47), 98: (0, 240), 31: (0, 61), 11: (0, 3), 93: (0, 81), 2: (0, 7), 1: (0, 15), 0: (0, 11), 6: (0, 136), 8: (0, 76), 10: (0, 93), 99: (0, 56), 75: (0, 118), 100: (0, 98), 13: (0, 55), 16: (0, 125), 17: (0, 126), 18: (0, 86), 19: (0, 80), 77: (0, 133), 76: (0, 38), 20: (0, 71), 22: (0, 51), 23: (0, 44), 24: (0, 97), 79: (0, 8), 28: (0, 234), 29: (0, 77), 30: (0, 198), 27: (0, 89), 32: (0, 182)}, 144: {42: (1, {'@': 143}), 45: (1, {'@': 155}), 47: (1, {'@': 155}), 48: (1, {'@': 155}), 43: (1, {'@': 143}), 49: (1, {'@': 143}), 50: (1, {'@': 143})}, 145: {49: (1, {'@': 219}), 50: (1, {'@': 219}), 53: (1, {'@': 219}), 45: (1, {'@': 219}), 54: (1, {'@': 219}), 47: (1, {'@': 219}), 42: (1, {'@': 219}), 52: (1, {'@': 219}), 48: (1, {'@': 219}), 46: (1, {'@': 219}), 43: (1, {'@': 219})}, 146: {101: (0, 32), 82: (0, 40)}, 147: {0: (0, 11), 1: (0, 15), 2: (0, 7), 12: (0, 41), 3: (0, 142), 4: (0, 221), 78: (0, 79), 72: (0, 42), 5: (0, 231), 6: (0, 136), 7: (0, 108), 8: (0, 76), 9: (0, 19), 10: (0, 93), 13: (0, 55), 14: (0, 106), 15: (0, 24), 16: (0, 125), 17: (0, 126), 18: (0, 86), 19: (0, 80), 73: (0, 73), 20: (0, 71), 21: (0, 248), 77: (0, 14), 22: (0, 51), 23: (0, 44), 24: (0, 97), 25: (0, 2), 26: (0, 47), 27: (0, 89), 28: (0, 234), 29: (0, 77), 30: (0, 198), 31: (0, 61), 32: (0, 182), 11: (0, 3)}, 148: {69: (0, 223), 70: (0, 226), 71: (0, 222), 29: (0, 191)}, 149: {11: (1, {'@': 97}), 5: (1, {'@': 97}), 30: (1, {'@': 97}), 25: (1, {'@': 97}), 4: (1, {'@': 97}), 2: (1, {'@': 97}), 22: (1, {'@': 97}), 15: (1, {'@': 97}), 13: (1, {'@': 97}), 29: (1, {'@': 97}), 21: (1, {'@': 97}), 10: (1, {'@': 97})}, 150: {42: (1, {'@': 180}), 43: (1, {'@': 180}), 51: (1, {'@': 180}), 52: (1, {'@': 180}), 49: (1, {'@': 180}), 50: (1, {'@': 180}), 53: (1, {'@': 180}), 45: (1, {'@': 180}), 54: (1, {'@': 180}), 48: (1, {'@': 180}), 46: (1, {'@': 180}), 47: (1, {'@': 180}), 55: (1, {'@': 180}), 56: (1, {'@': 180}), 57: (1, {'@': 180}), 58: (1, {'@': 180}), 59: (1, {'@': 180}), 60: (1, {'@': 180}), 61: (1, {'@': 180}), 62: (1, {'@': 180}), 63: (1, {'@': 180}), 64: (1, {'@': 180}), 65: (1, {'@': 180}), 66: (1, {'@': 180}), 67: (1, {'@': 180}), 68: (1, {'@': 180}), 69: (1, {'@': 180}), 70: (1, {'@': 180}), 71: (1, {'@': 180}), 29: (1, {'@': 180})}, 151: {42: (0, 190)}, 152: {42: (1, {'@': 84}), 43: (1, {'@': 84}), 51: (1, {'@': 84}), 52: (1, {'@': 84}), 49: (1, {'@': 84}), 50: (1, {'@': 84}), 53: (1, {'@': 84}), 45: (1, {'@': 84}), 54: (1, {'@': 84}), 48: (1, {'@': 84}), 46: (1, {'@': 84}), 47: (1, {'@': 84}), 55: (1, {'@': 84}), 56: (1, {'@': 84}), 57: (1, {'@': 84}), 58: (1, {'@': 84}), 59: (1, {'@': 84}), 60: (1, {'@': 84}), 61: (1, {'@': 84}), 62: (1, {'@': 84}), 63: (1, {'@': 84}), 64: (1, {'@': 84}), 65: (1, {'@': 84}), 66: (1, {'@': 84}), 67: (1, {'@': 84}), 68: (1, {'@': 84}), 69: (1, {'@': 84}), 70: (1, {'@': 84}), 71: (1, {'@': 84}), 29: (1, {'@': 84})}, 153: {11: (1, {'@': 98}), 5: (1, {'@': 98}), 30: (1, {'@': 98}), 25: (1, {'@': 98}), 4: (1, {'@': 98}), 2: (1, {'@': 98}), 22: (1, {'@': 98}), 15: (1, {'@': 98}), 13: (1, {'@': 98}), 29: (1, {'@': 98}), 21: (1, {'@': 98}), 10: (1, {'@': 98})}, 154: {21: (0, 164), 80: (0, 146)}, 155: {42: (1, {'@': 144}), 45: (1, {'@': 152}), 48: (1, {'@': 152}), 43: (1, {'@': 144}), 49: (1, {'@': 144}), 50: (1, {'@': 144})}, 156: {11: (1, {'@': 91}), 5: (1, {'@': 91}), 30: (1, {'@': 91}), 25: (1, {'@': 91}), 4: (1, {'@': 91}), 2: (1, {'@': 91}), 22: (1, {'@': 91}), 15: (1, {'@': 91}), 13: (1, {'@': 91}), 29: (1, {'@': 91}), 21: (1, {'@': 91}), 10: (1, {'@': 91})}, 157: {80: (1, {'@': 200}), 38: (1, {'@': 200})}, 158: {58: (0, 193), 59: (0, 260), 60: (0, 153), 44: (0, 176), 64: (0, 199), 50: (0, 122), 53: (0, 224), 57: (0, 200), 84: (0, 241), 63: (0, 255), 49: (0, 129), 96: (0, 252), 65: (0, 149), 62: (0, 227), 68: (0, 25), 89: (0, 217), 66: (0, 170), 67: (0, 156), 61: (0, 177), 43: (0, 214), 45: (1, {'@': 163}), 52: (1, {'@': 163}), 54: (1, {'@': 163}), 48: (1, {'@': 163}), 46: (1, {'@': 163}), 47: (1, {'@': 163})}, 159: {41: (1, {'@': 183}), 38: (1, {'@': 183})}, 160: {41: (1, {'@': 187})}, 161: {3: (0, 142), 4: (0, 221), 72: (0, 42), 73: (0, 213), 5: (0, 231), 7: (0, 108), 74: (0, 36), 9: (0, 19), 12: (0, 41), 14: (0, 106), 15: (0, 24), 21: (0, 248), 25: (0, 2), 26: (0, 47), 31: (0, 61), 11: (0, 3), 0: (0, 11), 1: (0, 15), 2: (0, 7), 6: (0, 136), 8: (0, 76), 10: (0, 93), 13: (0, 55), 16: (0, 125), 17: (0, 126), 18: (0, 86), 19: (0, 80), 76: (0, 38), 20: (0, 71), 77: (0, 14), 22: (0, 51), 78: (0, 79), 75: (0, 257), 23: (0, 44), 24: (0, 97), 79: (0, 92), 28: (0, 234), 29: (0, 77), 30: (0, 198), 27: (0, 89), 32: (0, 182)}, 162: {78: (0, 79), 94: (0, 155), 3: (0, 142), 4: (0, 221), 72: (0, 116), 73: (0, 213), 5: (0, 231), 12: (0, 196), 7: (0, 108), 74: (0, 144), 9: (0, 19), 14: (0, 106), 15: (0, 24), 21: (0, 248), 25: (0, 2), 26: (0, 47), 98: (0, 240), 31: (0, 61), 11: (0, 3), 93: (0, 81), 2: (0, 7), 1: (0, 15), 0: (0, 11), 97: (0, 105), 6: (0, 136), 8: (0, 76), 10: (0, 93), 99: (0, 56), 75: (0, 118), 100: (0, 98), 13: (0, 55), 16: (0, 125), 17: (0, 126), 18: (0, 86), 19: (0, 80), 77: (0, 133), 76: (0, 38), 20: (0, 71), 22: (0, 51), 23: (0, 44), 24: (0, 97), 79: (0, 8), 28: (0, 234), 29: (0, 77), 30: (0, 198), 27: (0, 89), 32: (0, 182)}, 163: {51: (0, 256), 43: (0, 94)}, 164: {11: (1, {'@': 192}), 30: (1, {'@': 192}), 25: (1, {'@': 192}), 2: (1, {'@': 192}), 4: (1, {'@': 192}), 22: (1, {'@': 192}), 15: (1, {'@': 192}), 13: (1, {'@': 192}), 10: (1, {'@': 192})}, 165: {41: (1, {'@': 185}), 38: (1, {'@': 185})}, 166: {42: (1, {'@': 181}), 43: (1, {'@': 181}), 51: (1, {'@': 181}), 52: (1, {'@': 181}), 49: (1, {'@': 181}), 50: (1, {'@': 181}), 53: (1, {'@': 181}), 45: (1, {'@': 181}), 54: (1, {'@': 181}), 48: (1, {'@': 181}), 46: (1, {'@': 181}), 47: (1, {'@': 181}), 55: (1, {'@': 181}), 56: (1, {'@': 181}), 57: (1, {'@': 181}), 58: (1, {'@': 181}), 59: (1, {'@': 181}), 60: (1, {'@': 181}), 61: (1, {'@': 181}), 62: (1, {'@': 181}), 63: (1, {'@': 181}), 64: (1, {'@': 181}), 65: (1, {'@': 181}), 66: (1, {'@': 181}), 67: (1, {'@': 181}), 68: (1, {'@': 181}), 69: (1, {'@': 181}), 70: (1, {'@': 181}), 71: (1, {'@': 181}), 29: (1, {'@': 181})}, 167: {41: (1, {'@': 190})}, 168: {27: (0, 148), 3: (0, 142), 4: (0, 221), 7: (0, 108), 9: (0, 19), 17: (0, 112), 14: (0, 106), 15: (0, 24), 25: (0, 2), 26: (0, 47), 31: (0, 61), 11: (0, 3), 0: (0, 11), 1: (0, 15), 2: (0, 7), 6: (0, 136), 8: (0, 76), 10: (0, 93), 13: (0, 55), 16: (0, 125), 19: (0, 80), 20: (0, 71), 102: (0, 204), 22: (0, 51), 23: (0, 44), 24: (0, 97), 28: (0, 234), 30: (0, 198), 32: (0, 182)}, 169: {43: (1, {'@': 178})}, 170: {11: (1, {'@': 93}), 5: (1, {'@': 93}), 30: (1, {'@': 93}), 25: (1, {'@': 93}), 4: (1, {'@': 93}), 2: (1, {'@': 93}), 22: (1, {'@': 93}), 15: (1, {'@': 93}), 13: (1, {'@': 93}), 29: (1, {'@': 93}), 21: (1, {'@': 93}), 10: (1, {'@': 93})}, 171: {42: (1, {'@': 87}), 43: (1, {'@': 87}), 51: (1, {'@': 87}), 52: (1, {'@': 87}), 49: (1, {'@': 87}), 50: (1, {'@': 87}), 53: (1, {'@': 87}), 45: (1, {'@': 87}), 54: (1, {'@': 87}), 48: (1, {'@': 87}), 46: (1, {'@': 87}), 47: (1, {'@': 87}), 55: (1, {'@': 87}), 56: (1, {'@': 87}), 57: (1, {'@': 87}), 58: (1, {'@': 87}), 59: (1, {'@': 87}), 60: (1, {'@': 87}), 61: (1, {'@': 87}), 62: (1, {'@': 87}), 63: (1, {'@': 87}), 64: (1, {'@': 87}), 65: (1, {'@': 87}), 66: (1, {'@': 87}), 67: (1, {'@': 87}), 68: (1, {'@': 87}), 69: (1, {'@': 87}), 70: (1, {'@': 87}), 71: (1, {'@': 87}), 29: (1, {'@': 87})}, 172: {41: (1, {'@': 57})}, 173: {43: (1, {'@': 169})}, 174: {42: (0, 261)}, 175: {38: (0, 54), 80: (0, 50)}, 176: {42: (0, 45), 43: (0, 94)}, 177: {11: (1, {'@': 96}), 5: (1, {'@': 96}), 30: (1, {'@': 96}), 25: (1, {'@': 96}), 4: (1, {'@': 96}), 2: (1, {'@': 96}), 22: (1, {'@': 96}), 15: (1, {'@': 96}), 13: (1, {'@': 96}), 29: (1, {'@': 96}), 21: (1, {'@': 96}), 10: (1, {'@': 96})}, 178: {42: (1, {'@': 207}), 48: (1, {'@': 207}), 49: (1, {'@': 207}), 43: (1, {'@': 207}), 50: (1, {'@': 207})}, 179: {41: (1, {'@': 68})}, 180: {52: (0, 236), 42: (1, {'@': 159}), 49: (1, {'@': 159}), 50: (1, {'@': 159}), 45: (1, {'@': 159}), 48: (1, {'@': 159}), 46: (1, {'@': 159}), 43: (1, {'@': 159}), 47: (1, {'@': 159})}, 181: {41: (1, {'@': 58})}, 182: {42: (1, {'@': 104}), 43: (1, {'@': 104}), 51: (1, {'@': 104}), 52: (1, {'@': 104}), 49: (1, {'@': 104}), 50: (1, {'@': 104}), 53: (1, {'@': 104}), 45: (1, {'@': 104}), 54: (1, {'@': 104}), 48: (1, {'@': 104}), 46: (1, {'@': 104}), 47: (1, {'@': 104}), 55: (1, {'@': 104}), 56: (1, {'@': 104}), 57: (1, {'@': 104}), 58: (1, {'@': 104}), 59: (1, {'@': 104}), 60: (1, {'@': 104}), 61: (1, {'@': 104}), 62: (1, {'@': 104}), 63: (1, {'@': 104}), 64: (1, {'@': 104}), 65: (1, {'@': 104}), 66: (1, {'@': 104}), 67: (1, {'@': 104}), 68: (1, {'@': 104}), 69: (1, {'@': 104}), 70: (1, {'@': 104}), 71: (1, {'@': 104}), 29: (1, {'@': 104})}, 183: {41: (1, {'@': 66})}, 184: {42: (1, {'@': 120}), 43: (1, {'@': 120}), 51: (1, {'@': 120}), 52: (1, {'@': 120}), 49: (1, {'@': 120}), 50: (1, {'@': 120}), 53: (1, {'@': 120}), 45: (1, {'@': 120}), 54: (1, {'@': 120}), 48: (1, {'@': 120}), 46: (1, {'@': 120}), 47: (1, {'@': 120}), 55: (1, {'@': 120}), 56: (1, {'@': 120}), 57: (1, {'@': 120}), 58: (1, {'@': 120}), 59: (1, {'@': 120}), 60: (1, {'@': 120}), 61: (1, {'@': 120}), 62: (1, {'@': 120}), 63: (1, {'@': 120}), 64: (1, {'@': 120}), 65: (1, {'@': 120}), 66: (1, {'@': 120}), 67: (1, {'@': 120}), 68: (1, {'@': 120}), 69: (1, {'@': 120}), 70: (1, {'@': 120}), 71: (1, {'@': 120}), 29: (1, {'@': 120})}, 185: {3: (0, 142), 4: (0, 221), 72: (0, 42), 73: (0, 213), 5: (0, 231), 7: (0, 108), 74: (0, 36), 9: (0, 19), 93: (0, 85), 12: (0, 41), 14: (0, 106), 15: (0, 24), 21: (0, 248), 25: (0, 2), 26: (0, 47), 31: (0, 61), 11: (0, 3), 0: (0, 11), 1: (0, 15), 2: (0, 7), 6: (0, 136), 8: (0, 76), 10: (0, 93), 75: (0, 118), 13: (0, 55), 16: (0, 125), 17: (0, 126), 18: (0, 86), 19: (0, 80), 76: (0, 38), 20: (0, 71), 77: (0, 14), 22: (0, 51), 78: (0, 79), 23: (0, 44), 24: (0, 97), 79: (0, 92), 28: (0, 234), 94: (0, 117), 29: (0, 77), 30: (0, 198), 27: (0, 89), 32: (0, 182)}, 186: {42: (1, {'@': 137}), 43: (1, {'@': 137}), 51: (1, {'@': 137}), 52: (1, {'@': 137}), 49: (1, {'@': 137}), 50: (1, {'@': 137}), 53: (1, {'@': 137}), 45: (1, {'@': 137}), 54: (1, {'@': 137}), 48: (1, {'@': 137}), 46: (1, {'@': 137}), 47: (1, {'@': 137}), 55: (1, {'@': 137}), 56: (1, {'@': 137}), 57: (1, {'@': 137}), 58: (1, {'@': 137}), 59: (1, {'@': 137}), 60: (1, {'@': 137}), 61: (1, {'@': 137}), 62: (1, {'@': 137}), 63: (1, {'@': 137}), 64: (1, {'@': 137}), 65: (1, {'@': 137}), 66: (1, {'@': 137}), 67: (1, {'@': 137}), 68: (1, {'@': 137}), 69: (1, {'@': 137}), 70: (1, {'@': 137}), 71: (1, {'@': 137}), 29: (1, {'@': 137})}, 187: {80: (1, {'@': 197}), 21: (1, {'@': 197})}, 188: {42: (1, {'@': 86}), 43: (1, {'@': 86}), 51: (1, {'@': 86}), 52: (1, {'@': 86}), 49: (1, {'@': 86}), 50: (1, {'@': 86}), 53: (1, {'@': 86}), 45: (1, {'@': 86}), 54: (1, {'@': 86}), 48: (1, {'@': 86}), 46: (1, {'@': 86}), 47: (1, {'@': 86}), 55: (1, {'@': 86}), 56: (1, {'@': 86}), 57: (1, {'@': 86}), 58: (1, {'@': 86}), 59: (1, {'@': 86}), 60: (1, {'@': 86}), 61: (1, {'@': 86}), 62: (1, {'@': 86}), 63: (1, {'@': 86}), 64: (1, {'@': 86}), 65: (1, {'@': 86}), 66: (1, {'@': 86}), 67: (1, {'@': 86}), 68: (1, {'@': 86}), 69: (1, {'@': 86}), 70: (1, {'@': 86}), 71: (1, {'@': 86}), 29: (1, {'@': 86})}, 189: {95: (0, 22), 35: (0, 128), 34: (0, 127), 36: (0, 52), 38: (0, 251), 37: (0, 160), 39: (0, 220), 40: (0, 165), 41: (1, {'@': 73})}, 190: {42: (1, {'@': 83}), 43: (1, {'@': 83}), 51: (1, {'@': 83}), 52: (1, {'@': 83}), 49: (1, {'@': 83}), 50: (1, {'@': 83}), 53: (1, {'@': 83}), 45: (1, {'@': 83}), 54: (1, {'@': 83}), 48: (1, {'@': 83}), 46: (1, {'@': 83}), 47: (1, {'@': 83}), 55: (1, {'@': 83}), 56: (1, {'@': 83}), 57: (1, {'@': 83}), 58: (1, {'@': 83}), 59: (1, {'@': 83}), 60: (1, {'@': 83}), 61: (1, {'@': 83}), 62: (1, {'@': 83}), 63: (1, {'@': 83}), 64: (1, {'@': 83}), 65: (1, {'@': 83}), 66: (1, {'@': 83}), 67: (1, {'@': 83}), 68: (1, {'@': 83}), 69: (1, {'@': 83}), 70: (1, {'@': 83}), 71: (1, {'@': 83}), 29: (1, {'@': 83})}, 191: {35: (0, 179), 34: (0, 127), 36: (0, 52), 39: (0, 220), 40: (0, 165), 41: (1, {'@': 69})}, 192: {43: (1, {'@': 179})}, 193: {11: (1, {'@': 95}), 5: (1, {'@': 95}), 30: (1, {'@': 95}), 25: (1, {'@': 95}), 4: (1, {'@': 95}), 2: (1, {'@': 95}), 22: (1, {'@': 95}), 15: (1, {'@': 95}), 13: (1, {'@': 95}), 29: (1, {'@': 95}), 21: (1, {'@': 95}), 10: (1, {'@': 95})}, 194: {103: (0, 175), 87: (0, 157)}, 195: {43: (0, 162)}, 196: {53: (0, 224), 84: (0, 241), 43: (0, 143), 45: (1, {'@': 163}), 52: (1, {'@': 163}), 54: (1, {'@': 163}), 48: (1, {'@': 163}), 46: (1, {'@': 163}), 47: (1, {'@': 163})}, 197: {42: (1, {'@': 136}), 43: (1, {'@': 136}), 51: (1, {'@': 136}), 52: (1, {'@': 136}), 49: (1, {'@': 136}), 50: (1, {'@': 136}), 53: (1, {'@': 136}), 45: (1, {'@': 136}), 54: (1, {'@': 136}), 48: (1, {'@': 136}), 46: (1, {'@': 136}), 47: (1, {'@': 136}), 55: (1, {'@': 136}), 56: (1, {'@': 136}), 57: (1, {'@': 136}), 58: (1, {'@': 136}), 59: (1, {'@': 136}), 60: (1, {'@': 136}), 61: (1, {'@': 136}), 62: (1, {'@': 136}), 63: (1, {'@': 136}), 64: (1, {'@': 136}), 65: (1, {'@': 136}), 66: (1, {'@': 136}), 67: (1, {'@': 136}), 68: (1, {'@': 136}), 69: (1, {'@': 136}), 70: (1, {'@': 136}), 71: (1, {'@': 136}), 29: (1, {'@': 136})}, 198: {0: (0, 11), 1: (0, 15), 2: (0, 7), 3: (0, 142), 4: (0, 221), 5: (0, 231), 6: (0, 136), 7: (0, 108), 8: (0, 76), 9: (0, 19), 10: (0, 93), 13: (0, 55), 14: (0, 106), 15: (0, 24), 16: (0, 125), 17: (0, 126), 18: (0, 86), 19: (0, 80), 12: (0, 68), 20: (0, 71), 21: (0, 248), 22: (0, 51), 23: (0, 44), 24: (0, 97), 25: (0, 2), 26: (0, 47), 27: (0, 89), 28: (0, 234), 29: (0, 77), 30: (0, 198), 31: (0, 61), 32: (0, 182), 11: (0, 3)}, 199: {11: (1, {'@': 88}), 5: (1, {'@': 88}), 30: (1, {'@': 88}), 25: (1, {'@': 88}), 4: (1, {'@': 88}), 2: (1, {'@': 88}), 22: (1, {'@': 88}), 15: (1, {'@': 88}), 13: (1, {'@': 88}), 29: (1, {'@': 88}), 21: (1, {'@': 88}), 10: (1, {'@': 88})}, 200: {11: (1, {'@': 99}), 5: (1, {'@': 99}), 30: (1, {'@': 99}), 25: (1, {'@': 99}), 4: (1, {'@': 99}), 2: (1, {'@': 99}), 22: (1, {'@': 99}), 15: (1, {'@': 99}), 13: (1, {'@': 99}), 29: (1, {'@': 99}), 21: (1, {'@': 99}), 10: (1, {'@': 99})}, 201: {42: (1, {'@': 210}), 49: (1, {'@': 210}), 50: (1, {'@': 210}), 45: (1, {'@': 210}), 48: (1, {'@': 210}), 43: (1, {'@': 210}), 47: (1, {'@': 210})}, 202: {42: (1, {'@': 212}), 49: (1, {'@': 212}), 50: (1, {'@': 212}), 45: (1, {'@': 212}), 48: (1, {'@': 212}), 46: (1, {'@': 212}), 43: (1, {'@': 212}), 47: (1, {'@': 212})}, 203: {42: (1, {'@': 124}), 43: (1, {'@': 124}), 51: (1, {'@': 124}), 52: (1, {'@': 124}), 49: (1, {'@': 124}), 50: (1, {'@': 124}), 53: (1, {'@': 124}), 45: (1, {'@': 124}), 54: (1, {'@': 124}), 48: (1, {'@': 124}), 46: (1, {'@': 124}), 47: (1, {'@': 124}), 55: (1, {'@': 124}), 56: (1, {'@': 124}), 57: (1, {'@': 124}), 58: (1, {'@': 124}), 59: (1, {'@': 124}), 60: (1, {'@': 124}), 61: (1, {'@': 124}), 62: (1, {'@': 124}), 63: (1, {'@': 124}), 64: (1, {'@': 124}), 65: (1, {'@': 124}), 66: (1, {'@': 124}), 67: (1, {'@': 124}), 68: (1, {'@': 124}), 69: (1, {'@': 124}), 70: (1, {'@': 124}), 71: (1, {'@': 124}), 29: (1, {'@': 124})}, 204: {41: (1, {'@': 56})}, 205: {43: (0, 0)}, 206: {78: (0, 79), 94: (0, 155), 3: (0, 142), 4: (0, 221), 72: (0, 116), 73: (0, 213), 5: (0, 231), 7: (0, 108), 74: (0, 144), 9: (0, 19), 97: (0, 114), 14: (0, 106), 12: (0, 69), 15: (0, 24), 21: (0, 248), 25: (0, 2), 26: (0, 47), 98: (0, 240), 31: (0, 61), 11: (0, 3), 93: (0, 81), 2: (0, 7), 1: (0, 15), 0: (0, 11), 6: (0, 136), 8: (0, 76), 10: (0, 93), 99: (0, 56), 75: (0, 118), 100: (0, 98), 13: (0, 55), 16: (0, 125), 17: (0, 126), 18: (0, 86), 19: (0, 80), 77: (0, 133), 76: (0, 38), 20: (0, 71), 22: (0, 51), 23: (0, 44), 24: (0, 97), 79: (0, 8), 28: (0, 234), 29: (0, 77), 30: (0, 198), 27: (0, 89), 32: (0, 182)}, 207: {49: (1, {'@': 217}), 50: (1, {'@': 217}), 45: (1, {'@': 217}), 54: (1, {'@': 217}), 47: (1, {'@': 217}), 42: (1, {'@': 217}), 52: (1, {'@': 217}), 48: (1, {'@': 217}), 46: (1, {'@': 217}), 43: (1, {'@': 217})}, 208: {42: (1, {'@': 138}), 43: (1, {'@': 138}), 51: (1, {'@': 138}), 52: (1, {'@': 138}), 49: (1, {'@': 138}), 50: (1, {'@': 138}), 53: (1, {'@': 138}), 45: (1, {'@': 138}), 54: (1, {'@': 138}), 48: (1, {'@': 138}), 46: (1, {'@': 138}), 47: (1, {'@': 138}), 55: (1, {'@': 138}), 56: (1, {'@': 138}), 57: (1, {'@': 138}), 58: (1, {'@': 138}), 59: (1, {'@': 138}), 60: (1, {'@': 138}), 61: (1, {'@': 138}), 62: (1, {'@': 138}), 63: (1, {'@': 138}), 64: (1, {'@': 138}), 65: (1, {'@': 138}), 66: (1, {'@': 138}), 67: (1, {'@': 138}), 68: (1, {'@': 138}), 69: (1, {'@': 138}), 70: (1, {'@': 138}), 71: (1, {'@': 138}), 29: (1, {'@': 138})}, 209: {42: (0, 33), 43: (0, 94)}, 210: {78: (0, 79), 94: (0, 155), 3: (0, 142), 4: (0, 221), 72: (0, 116), 73: (0, 213), 5: (0, 231), 7: (0, 108), 74: (0, 144), 9: (0, 19), 14: (0, 106), 12: (0, 53), 15: (0, 24), 21: (0, 248), 25: (0, 2), 26: (0, 47), 98: (0, 240), 31: (0, 61), 11: (0, 3), 93: (0, 81), 2: (0, 7), 1: (0, 15), 0: (0, 11), 6: (0, 136), 8: (0, 76), 10: (0, 93), 99: (0, 56), 75: (0, 118), 100: (0, 98), 13: (0, 55), 97: (0, 27), 16: (0, 125), 17: (0, 126), 18: (0, 86), 19: (0, 80), 77: (0, 133), 76: (0, 38), 20: (0, 71), 22: (0, 51), 23: (0, 44), 24: (0, 97), 79: (0, 8), 28: (0, 234), 29: (0, 77), 30: (0, 198), 27: (0, 89), 32: (0, 182)}, 211: {104: (0, 159)}, 212: {42: (0, 100), 44: (0, 215), 43: (0, 214)}, 213: {105: (0, 180), 52: (0, 147), 42: (1, {'@': 157}), 49: (1, {'@': 157}), 50: (1, {'@': 157}), 45: (1, {'@': 157}), 48: (1, {'@': 157}), 46: (1, {'@': 157}), 43: (1, {'@': 157}), 47: (1, {'@': 157})}, 214: {0: (0, 11), 1: (0, 15), 2: (0, 7), 3: (0, 142), 4: (0, 221), 5: (0, 231), 6: (0, 136), 7: (0, 108), 8: (0, 76), 9: (0, 19), 10: (0, 93), 13: (0, 55), 14: (0, 106), 15: (0, 24), 16: (0, 125), 17: (0, 126), 18: (0, 86), 19: (0, 80), 12: (0, 18), 20: (0, 71), 21: (0, 248), 22: (0, 51), 23: (0, 44), 24: (0, 97), 25: (0, 2), 26: (0, 47), 27: (0, 89), 28: (0, 234), 29: (0, 77), 30: (0, 198), 31: (0, 61), 32: (0, 182), 11: (0, 3)}, 215: {42: (0, 10), 43: (0, 94)}, 216: {106: (0, 168), 27: (0, 148), 3: (0, 142), 4: (0, 221), 7: (0, 108), 9: (0, 19), 17: (0, 112), 107: (0, 37), 14: (0, 106), 15: (0, 24), 21: (0, 34), 25: (0, 2), 26: (0, 47), 31: (0, 61), 11: (0, 3), 0: (0, 11), 2: (0, 7), 1: (0, 15), 6: (0, 136), 108: (0, 84), 8: (0, 76), 10: (0, 93), 13: (0, 55), 16: (0, 125), 19: (0, 80), 20: (0, 71), 22: (0, 51), 23: (0, 44), 24: (0, 97), 102: (0, 172), 28: (0, 234), 30: (0, 198), 32: (0, 182)}, 217: {0: (0, 11), 1: (0, 15), 2: (0, 7), 3: (0, 142), 4: (0, 221), 5: (0, 231), 6: (0, 136), 7: (0, 108), 8: (0, 76), 9: (0, 19), 10: (0, 93), 13: (0, 55), 14: (0, 106), 12: (0, 151), 15: (0, 24), 16: (0, 125), 17: (0, 126), 18: (0, 86), 19: (0, 80), 20: (0, 71), 21: (0, 248), 22: (0, 51), 23: (0, 44), 24: (0, 97), 25: (0, 2), 26: (0, 47), 27: (0, 89), 28: (0, 234), 29: (0, 77), 30: (0, 198), 31: (0, 61), 32: (0, 182), 11: (0, 3)}, 218: {3: (0, 142), 4: (0, 221), 72: (0, 42), 73: (0, 213), 5: (0, 231), 7: (0, 108), 74: (0, 36), 9: (0, 19), 12: (0, 41), 14: (0, 106), 15: (0, 24), 21: (0, 248), 25: (0, 2), 26: (0, 47), 31: (0, 61), 11: (0, 3), 93: (0, 81), 1: (0, 15), 0: (0, 11), 2: (0, 7), 6: (0, 136), 8: (0, 76), 99: (0, 49), 10: (0, 93), 75: (0, 118), 98: (0, 178), 13: (0, 55), 16: (0, 125), 17: (0, 126), 18: (0, 86), 19: (0, 80), 76: (0, 38), 20: (0, 71), 77: (0, 14), 22: (0, 51), 78: (0, 79), 23: (0, 44), 24: (0, 97), 79: (0, 92), 28: (0, 234), 94: (0, 117), 29: (0, 77), 30: (0, 198), 27: (0, 89), 32: (0, 182)}, 219: {42: (1, {'@': 121}), 43: (1, {'@': 121}), 51: (1, {'@': 121}), 52: (1, {'@': 121}), 49: (1, {'@': 121}), 50: (1, {'@': 121}), 53: (1, {'@': 121}), 45: (1, {'@': 121}), 54: (1, {'@': 121}), 48: (1, {'@': 121}), 46: (1, {'@': 121}), 47: (1, {'@': 121}), 55: (1, {'@': 121}), 56: (1, {'@': 121}), 57: (1, {'@': 121}), 58: (1, {'@': 121}), 59: (1, {'@': 121}), 60: (1, {'@': 121}), 61: (1, {'@': 121}), 62: (1, {'@': 121}), 63: (1, {'@': 121}), 64: (1, {'@': 121}), 65: (1, {'@': 121}), 66: (1, {'@': 121}), 67: (1, {'@': 121}), 68: (1, {'@': 121}), 69: (1, {'@': 121}), 70: (1, {'@': 121}), 71: (1, {'@': 121}), 29: (1, {'@': 121})}, 220: {41: (1, {'@': 184}), 38: (1, {'@': 184})}, 221: {94: (0, 155), 12: (0, 158), 3: (0, 142), 4: (0, 221), 72: (0, 116), 97: (0, 139), 73: (0, 213), 5: (0, 231), 7: (0, 108), 74: (0, 144), 9: (0, 19), 109: (0, 169), 46: (0, 173), 14: (0, 106), 110: (0, 192), 15: (0, 24), 21: (0, 248), 45: (0, 258), 96: (0, 195), 25: (0, 2), 26: (0, 47), 98: (0, 240), 111: (0, 205), 31: (0, 61), 11: (0, 3), 0: (0, 11), 2: (0, 7), 1: (0, 15), 93: (0, 81), 23: (0, 62), 6: (0, 136), 8: (0, 76), 10: (0, 93), 99: (0, 56), 112: (0, 28), 113: (0, 59), 75: (0, 118), 100: (0, 98), 16: (0, 102), 52: (0, 115), 13: (0, 55), 50: (0, 122), 17: (0, 126), 18: (0, 86), 19: (0, 80), 77: (0, 133), 76: (0, 38), 114: (0, 109), 20: (0, 71), 22: (0, 51), 78: (0, 79), 49: (0, 129), 47: (0, 132), 24: (0, 97), 48: (0, 29), 54: (0, 16), 28: (0, 234), 79: (0, 8), 29: (0, 77), 30: (0, 198), 27: (0, 89), 32: (0, 182), 53: (0, 137)}, 222: {34: (0, 127), 35: (0, 113), 36: (0, 52), 39: (0, 220), 40: (0, 165), 41: (1, {'@': 81})}, 223: {34: (0, 127), 35: (0, 110), 36: (0, 52), 37: (0, 243), 38: (0, 251), 39: (0, 220), 40: (0, 165), 41: (1, {'@': 65})}, 224: {0: (0, 11), 1: (0, 15), 2: (0, 7), 3: (0, 142), 4: (0, 221), 5: (0, 231), 6: (0, 136), 7: (0, 108), 8: (0, 76), 9: (0, 19), 10: (0, 93), 12: (0, 135), 13: (0, 55), 14: (0, 106), 15: (0, 24), 16: (0, 125), 17: (0, 126), 18: (0, 86), 19: (0, 80), 20: (0, 71), 21: (0, 248), 22: (0, 51), 23: (0, 44), 24: (0, 97), 25: (0, 2), 26: (0, 47), 27: (0, 89), 28: (0, 234), 29: (0, 77), 30: (0, 198), 31: (0, 61), 32: (0, 182), 11: (0, 3)}, 225: {42: (0, 188), 43: (0, 94)}, 226: {95: (0, 228), 35: (0, 259), 34: (0, 127), 36: (0, 52), 38: (0, 251), 37: (0, 160), 39: (0, 220), 40: (0, 165), 41: (1, {'@': 77})}, 227: {11: (1, {'@': 89}), 5: (1, {'@': 89}), 30: (1, {'@': 89}), 25: (1, {'@': 89}), 4: (1, {'@': 89}), 2: (1, {'@': 89}), 22: (1, {'@': 89}), 15: (1, {'@': 89}), 13: (1, {'@': 89}), 29: (1, {'@': 89}), 21: (1, {'@': 89}), 10: (1, {'@': 89})}, 228: {41: (1, {'@': 76})}, 229: {44: (0, 249), 43: (0, 214)}, 230: {42: (1, {'@': 133}), 43: (1, {'@': 133}), 51: (1, {'@': 133}), 52: (1, {'@': 133}), 49: (1, {'@': 133}), 50: (1, {'@': 133}), 53: (1, {'@': 133}), 45: (1, {'@': 133}), 54: (1, {'@': 133}), 48: (1, {'@': 133}), 46: (1, {'@': 133}), 47: (1, {'@': 133}), 55: (1, {'@': 133}), 56: (1, {'@': 133}), 57: (1, {'@': 133}), 58: (1, {'@': 133}), 59: (1, {'@': 133}), 60: (1, {'@': 133}), 61: (1, {'@': 133}), 62: (1, {'@': 133}), 63: (1, {'@': 133}), 64: (1, {'@': 133}), 65: (1, {'@': 133}), 66: (1, {'@': 133}), 67: (1, {'@': 133}), 68: (1, {'@': 133}), 69: (1, {'@': 133}), 70: (1, {'@': 133}), 71: (1, {'@': 133}), 29: (1, {'@': 133})}, 231: {1: (0, 15), 26: (0, 47), 15: (0, 24), 10: (0, 93), 7: (0, 166)}, 232: {0: (0, 11), 1: (0, 15), 2: (0, 7), 3: (0, 142), 4: (0, 221), 5: (0, 231), 6: (0, 136), 7: (0, 108), 8: (0, 76), 9: (0, 19), 10: (0, 93), 11: (0, 3), 12: (0, 5), 13: (0, 55), 14: (0, 106), 15: (0, 24), 16: (0, 125), 17: (0, 126), 18: (0, 86), 19: (0, 80), 20: (0, 71), 21: (0, 248), 22: (0, 51), 23: (0, 44), 24: (0, 97), 25: (0, 2), 26: (0, 47), 27: (0, 89), 28: (0, 234), 29: (0, 77), 30: (0, 198), 31: (0, 61), 32: (0, 182)}, 233: {55: (0, 43)}, 234: {42: (1, {'@': 116}), 43: (1, {'@': 116}), 51: (1, {'@': 116}), 52: (1, {'@': 116}), 49: (1, {'@': 116}), 50: (1, {'@': 116}), 53: (1, {'@': 116}), 45: (1, {'@': 116}), 54: (1, {'@': 116}), 48: (1, {'@': 116}), 46: (1, {'@': 116}), 47: (1, {'@': 116}), 55: (1, {'@': 116}), 56: (1, {'@': 116}), 57: (1, {'@': 116}), 58: (1, {'@': 116}), 59: (1, {'@': 116}), 60: (1, {'@': 116}), 61: (1, {'@': 116}), 62: (1, {'@': 116}), 63: (1, {'@': 116}), 64: (1, {'@': 116}), 65: (1, {'@': 116}), 66: (1, {'@': 116}), 67: (1, {'@': 116}), 68: (1, {'@': 116}), 69: (1, {'@': 116}), 70: (1, {'@': 116}), 71: (1, {'@': 116}), 29: (1, {'@': 116})}, 235: {3: (0, 142), 4: (0, 221), 72: (0, 42), 73: (0, 213), 5: (0, 231), 7: (0, 108), 74: (0, 36), 9: (0, 19), 98: (0, 31), 12: (0, 41), 14: (0, 106), 15: (0, 24), 21: (0, 248), 25: (0, 2), 26: (0, 47), 31: (0, 61), 11: (0, 3), 93: (0, 81), 1: (0, 15), 0: (0, 11), 2: (0, 7), 6: (0, 136), 8: (0, 76), 99: (0, 49), 10: (0, 93), 75: (0, 118), 13: (0, 55), 16: (0, 125), 17: (0, 126), 18: (0, 86), 19: (0, 80), 76: (0, 38), 20: (0, 71), 77: (0, 14), 22: (0, 51), 78: (0, 79), 23: (0, 44), 24: (0, 97), 79: (0, 92), 28: (0, 234), 94: (0, 117), 29: (0, 77), 30: (0, 198), 27: (0, 89), 32: (0, 182)}, 236: {0: (0, 11), 1: (0, 15), 2: (0, 7), 12: (0, 41), 3: (0, 142), 4: (0, 221), 78: (0, 79), 72: (0, 42), 5: (0, 231), 6: (0, 136), 7: (0, 108), 8: (0, 76), 9: (0, 19), 10: (0, 93), 13: (0, 55), 73: (0, 239), 14: (0, 106), 15: (0, 24), 16: (0, 125), 17: (0, 126), 18: (0, 86), 19: (0, 80), 20: (0, 71), 21: (0, 248), 77: (0, 14), 22: (0, 51), 23: (0, 44), 24: (0, 97), 25: (0, 2), 26: (0, 47), 27: (0, 89), 28: (0, 234), 29: (0, 77), 30: (0, 198), 31: (0, 61), 32: (0, 182), 11: (0, 3)}, 237: {3: (0, 142), 4: (0, 221), 72: (0, 42), 73: (0, 213), 5: (0, 231), 7: (0, 108), 9: (0, 19), 12: (0, 41), 14: (0, 106), 15: (0, 24), 21: (0, 248), 25: (0, 2), 26: (0, 47), 31: (0, 61), 11: (0, 3), 0: (0, 11), 1: (0, 15), 2: (0, 7), 6: (0, 136), 8: (0, 76), 10: (0, 93), 76: (0, 250), 13: (0, 55), 16: (0, 125), 17: (0, 126), 18: (0, 86), 19: (0, 80), 20: (0, 71), 77: (0, 14), 22: (0, 51), 78: (0, 79), 23: (0, 44), 24: (0, 97), 79: (0, 92), 28: (0, 234), 29: (0, 77), 30: (0, 198), 27: (0, 89), 32: (0, 182)}, 238: {42: (1, {'@': 139}), 43: (1, {'@': 139}), 51: (1, {'@': 139}), 52: (1, {'@': 139}), 49: (1, {'@': 139}), 50: (1, {'@': 139}), 53: (1, {'@': 139}), 45: (1, {'@': 139}), 54: (1, {'@': 139}), 48: (1, {'@': 139}), 46: (1, {'@': 139}), 47: (1, {'@': 139}), 55: (1, {'@': 139}), 56: (1, {'@': 139}), 57: (1, {'@': 139}), 58: (1, {'@': 139}), 59: (1, {'@': 139}), 60: (1, {'@': 139}), 61: (1, {'@': 139}), 62: (1, {'@': 139}), 63: (1, {'@': 139}), 64: (1, {'@': 139}), 65: (1, {'@': 139}), 66: (1, {'@': 139}), 67: (1, {'@': 139}), 68: (1, {'@': 139}), 69: (1, {'@': 139}), 70: (1, {'@': 139}), 71: (1, {'@': 139}), 29: (1, {'@': 139})}, 239: {42: (1, {'@': 215}), 52: (1, {'@': 215}), 49: (1, {'@': 215}), 50: (1, {'@': 215}), 45: (1, {'@': 215}), 48: (1, {'@': 215}), 46: (1, {'@': 215}), 43: (1, {'@': 215}), 47: (1, {'@': 215})}, 240: {48: (0, 235), 115: (0, 65)}, 241: {53: (0, 120), 42: (1, {'@': 165}), 52: (1, {'@': 165}), 49: (1, {'@': 165}), 50: (1, {'@': 165}), 45: (1, {'@': 165}), 54: (1, {'@': 165}), 48: (1, {'@': 165}), 46: (1, {'@': 165}), 43: (1, {'@': 165}), 47: (1, {'@': 165})}, 242: {42: (1, {'@': 119}), 43: (1, {'@': 119}), 51: (1, {'@': 119}), 52: (1, {'@': 119}), 49: (1, {'@': 119}), 50: (1, {'@': 119}), 53: (1, {'@': 119}), 45: (1, {'@': 119}), 54: (1, {'@': 119}), 48: (1, {'@': 119}), 46: (1, {'@': 119}), 47: (1, {'@': 119}), 55: (1, {'@': 119}), 56: (1, {'@': 119}), 57: (1, {'@': 119}), 58: (1, {'@': 119}), 59: (1, {'@': 119}), 60: (1, {'@': 119}), 61: (1, {'@': 119}), 62: (1, {'@': 119}), 63: (1, {'@': 119}), 64: (1, {'@': 119}), 65: (1, {'@': 119}), 66: (1, {'@': 119}), 67: (1, {'@': 119}), 68: (1, {'@': 119}), 69: (1, {'@': 119}), 70: (1, {'@': 119}), 71: (1, {'@': 119}), 29: (1, {'@': 119})}, 243: {41: (1, {'@': 64})}, 244: {21: (0, 17), 80: (0, 57)}, 245: {42: (1, {'@': 108}), 43: (1, {'@': 108}), 51: (1, {'@': 108}), 52: (1, {'@': 108}), 49: (1, {'@': 108}), 50: (1, {'@': 108}), 53: (1, {'@': 108}), 45: (1, {'@': 108}), 54: (1, {'@': 108}), 48: (1, {'@': 108}), 46: (1, {'@': 108}), 47: (1, {'@': 108}), 55: (1, {'@': 108}), 56: (1, {'@': 108}), 57: (1, {'@': 108}), 58: (1, {'@': 108}), 59: (1, {'@': 108}), 60: (1, {'@': 108}), 61: (1, {'@': 108}), 62: (1, {'@': 108}), 63: (1, {'@': 108}), 64: (1, {'@': 108}), 65: (1, {'@': 108}), 66: (1, {'@': 108}), 67: (1, {'@': 108}), 68: (1, {'@': 108}), 69: (1, {'@': 108}), 70: (1, {'@': 108}), 71: (1, {'@': 108}), 29: (1, {'@': 108})}, 246: {43: (0, 214), 44: (0, 209), 42: (0, 203)}, 247: {41: (1, {'@': 70})}, 248: {1: (0, 15), 26: (0, 47), 7: (0, 150), 10: (0, 93), 15: (0, 24)}, 249: {42: (0, 21), 43: (0, 94)}, 250: {42: (1, {'@': 213}), 49: (1, {'@': 213}), 50: (1, {'@': 213}), 45: (1, {'@': 213}), 48: (1, {'@': 213}), 46: (1, {'@': 213}), 43: (1, {'@': 213}), 47: (1, {'@': 213})}, 251: {82: (0, 30), 116: (0, 72)}, 252: {94: (0, 155), 3: (0, 142), 4: (0, 221), 72: (0, 116), 73: (0, 213), 5: (0, 231), 7: (0, 108), 74: (0, 144), 9: (0, 19), 14: (0, 106), 12: (0, 58), 15: (0, 24), 21: (0, 248), 25: (0, 2), 26: (0, 47), 98: (0, 240), 31: (0, 61), 11: (0, 3), 0: (0, 11), 2: (0, 7), 1: (0, 15), 93: (0, 81), 6: (0, 136), 8: (0, 76), 10: (0, 93), 99: (0, 56), 75: (0, 118), 100: (0, 98), 13: (0, 55), 16: (0, 125), 17: (0, 126), 18: (0, 86), 19: (0, 80), 77: (0, 133), 76: (0, 38), 20: (0, 71), 22: (0, 51), 97: (0, 104), 23: (0, 44), 78: (0, 79), 24: (0, 97), 79: (0, 8), 28: (0, 234), 29: (0, 77), 30: (0, 198), 27: (0, 89), 32: (0, 182)}, 253: {41: (1, {'@': 78})}, 254: {0: (0, 11), 1: (0, 15), 2: (0, 7), 12: (0, 41), 3: (0, 142), 4: (0, 221), 72: (0, 42), 5: (0, 231), 6: (0, 136), 7: (0, 108), 8: (0, 76), 9: (0, 19), 10: (0, 93), 78: (0, 207), 13: (0, 55), 14: (0, 106), 15: (0, 24), 16: (0, 125), 17: (0, 126), 18: (0, 86), 19: (0, 80), 20: (0, 71), 21: (0, 248), 22: (0, 51), 23: (0, 44), 24: (0, 97), 25: (0, 2), 26: (0, 47), 27: (0, 89), 28: (0, 234), 29: (0, 77), 30: (0, 198), 31: (0, 61), 32: (0, 182), 11: (0, 3)}, 255: {11: (1, {'@': 94}), 5: (1, {'@': 94}), 30: (1, {'@': 94}), 25: (1, {'@': 94}), 4: (1, {'@': 94}), 2: (1, {'@': 94}), 22: (1, {'@': 94}), 15: (1, {'@': 94}), 13: (1, {'@': 94}), 29: (1, {'@': 94}), 21: (1, {'@': 94}), 10: (1, {'@': 94})}, 256: {42: (1, {'@': 117}), 43: (1, {'@': 117}), 51: (1, {'@': 117}), 52: (1, {'@': 117}), 49: (1, {'@': 117}), 50: (1, {'@': 117}), 53: (1, {'@': 117}), 45: (1, {'@': 117}), 54: (1, {'@': 117}), 48: (1, {'@': 117}), 46: (1, {'@': 117}), 47: (1, {'@': 117}), 55: (1, {'@': 117}), 56: (1, {'@': 117}), 57: (1, {'@': 117}), 58: (1, {'@': 117}), 59: (1, {'@': 117}), 60: (1, {'@': 117}), 61: (1, {'@': 117}), 62: (1, {'@': 117}), 63: (1, {'@': 117}), 64: (1, {'@': 117}), 65: (1, {'@': 117}), 66: (1, {'@': 117}), 67: (1, {'@': 117}), 68: (1, {'@': 117}), 69: (1, {'@': 117}), 70: (1, {'@': 117}), 71: (1, {'@': 117}), 29: (1, {'@': 117})}, 257: {42: (1, {'@': 211}), 49: (1, {'@': 211}), 50: (1, {'@': 211}), 45: (1, {'@': 211}), 48: (1, {'@': 211}), 43: (1, {'@': 211}), 47: (1, {'@': 211})}, 258: {43: (1, {'@': 167})}, 259: {38: (0, 251), 37: (0, 160), 95: (0, 67), 41: (1, {'@': 75})}, 260: {11: (1, {'@': 92}), 5: (1, {'@': 92}), 30: (1, {'@': 92}), 25: (1, {'@': 92}), 4: (1, {'@': 92}), 2: (1, {'@': 92}), 22: (1, {'@': 92}), 15: (1, {'@': 92}), 13: (1, {'@': 92}), 29: (1, {'@': 92}), 21: (1, {'@': 92}), 10: (1, {'@': 92})}, 261: {42: (1, {'@': 122}), 43: (1, {'@': 122}), 51: (1, {'@': 122}), 52: (1, {'@': 122}), 49: (1, {'@': 122}), 50: (1, {'@': 122}), 53: (1, {'@': 122}), 45: (1, {'@': 122}), 54: (1, {'@': 122}), 48: (1, {'@': 122}), 46: (1, {'@': 122}), 47: (1, {'@': 122}), 55: (1, {'@': 122}), 56: (1, {'@': 122}), 57: (1, {'@': 122}), 58: (1, {'@': 122}), 59: (1, {'@': 122}), 60: (1, {'@': 122}), 61: (1, {'@': 122}), 62: (1, {'@': 122}), 63: (1, {'@': 122}), 64: (1, {'@': 122}), 65: (1, {'@': 122}), 66: (1, {'@': 122}), 67: (1, {'@': 122}), 68: (1, {'@': 122}), 69: (1, {'@': 122}), 70: (1, {'@': 122}), 71: (1, {'@': 122}), 29: (1, {'@': 122})}, 262: {80: (1, {'@': 196}), 21: (1, {'@': 196})}}, 'start_states': {'start': 216}, 'end_states': {'start': 84}}, 'options': {'debug': False, 'keep_all_tokens': False, 'tree_class': None, 'cache': False, 'postlex': None, 'parser': 'lalr', 'lexer': 'contextual', 'transformer': None, 'start': ['start'], 'priority': 'normal', 'ambiguity': 'auto', 'regex': False, 'propagate_positions': False, 'lexer_callbacks': {}, 'maybe_placeholders': False, 'edit_terminals': None, 'g_regex_flags': 0, 'use_bytes': False, 'import_paths': [], 'source_path': None}, '__type__': 'ParsingFrontend'}, 'rules': [{'@': 55}, {'@': 56}, {'@': 57}, {'@': 58}, {'@': 59}, {'@': 60}, {'@': 61}, {'@': 62}, {'@': 63}, {'@': 64}, {'@': 65}, {'@': 66}, {'@': 67}, {'@': 68}, {'@': 69}, {'@': 70}, {'@': 71}, {'@': 72}, {'@': 73}, {'@': 74}, {'@': 75}, {'@': 76}, {'@': 77}, {'@': 78}, {'@': 79}, {'@': 80}, {'@': 81}, {'@': 82}, {'@': 83}, {'@': 84}, {'@': 85}, {'@': 86}, {'@': 87}, {'@': 88}, {'@': 89}, {'@': 90}, {'@': 91}, {'@': 92}, {'@': 93}, {'@': 94}, {'@': 95}, {'@': 96}, {'@': 97}, {'@': 98}, {'@': 99}, {'@': 100}, {'@': 101}, {'@': 102}, {'@': 103}, {'@': 104}, {'@': 105}, {'@': 106}, {'@': 107}, {'@': 108}, {'@': 109}, {'@': 110}, {'@': 111}, {'@': 112}, {'@': 113}, {'@': 114}, {'@': 115}, {'@': 116}, {'@': 117}, {'@': 118}, {'@': 119}, {'@': 120}, {'@': 121}, {'@': 122}, {'@': 123}, {'@': 124}, {'@': 125}, {'@': 126}, {'@': 127}, {'@': 128}, {'@': 129}, {'@': 130}, {'@': 131}, {'@': 132}, {'@': 133}, {'@': 134}, {'@': 135}, {'@': 136}, {'@': 137}, {'@': 138}, {'@': 139}, {'@': 140}, {'@': 141}, {'@': 142}, {'@': 143}, {'@': 144}, {'@': 145}, {'@': 146}, {'@': 147}, {'@': 148}, {'@': 149}, {'@': 150}, {'@': 151}, {'@': 152}, {'@': 153}, {'@': 154}, {'@': 155}, {'@': 156}, {'@': 157}, {'@': 158}, {'@': 159}, {'@': 160}, {'@': 161}, {'@': 162}, {'@': 163}, {'@': 164}, {'@': 165}, {'@': 166}, {'@': 167}, {'@': 168}, {'@': 169}, {'@': 170}, {'@': 171}, {'@': 172}, {'@': 173}, {'@': 174}, {'@': 175}, {'@': 176}, {'@': 177}, {'@': 178}, {'@': 179}, {'@': 180}, {'@': 181}, {'@': 182}, {'@': 183}, {'@': 184}, {'@': 185}, {'@': 186}, {'@': 187}, {'@': 188}, {'@': 189}, {'@': 190}, {'@': 191}, {'@': 192}, {'@': 193}, {'@': 194}, {'@': 195}, {'@': 196}, {'@': 197}, {'@': 198}, {'@': 199}, {'@': 200}, {'@': 201}, {'@': 202}, {'@': 203}, {'@': 204}, {'@': 205}, {'@': 206}, {'@': 207}, {'@': 208}, {'@': 209}, {'@': 210}, {'@': 211}, {'@': 212}, {'@': 213}, {'@': 214}, {'@': 215}, {'@': 216}, {'@': 217}, {'@': 218}, {'@': 219}], 'options': {'debug': False, 'keep_all_tokens': False, 'tree_class': None, 'cache': False, 'postlex': None, 'parser': 'lalr', 'lexer': 'contextual', 'transformer': None, 'start': ['start'], 'priority': 'normal', 'ambiguity': 'auto', 'regex': False, 'propagate_positions': False, 'lexer_callbacks': {}, 'maybe_placeholders': False, 'edit_terminals': None, 'g_regex_flags': 0, 'use_bytes': False, 'import_paths': [], 'source_path': None}, '__type__': 'Lark'}
)
MEMO = (
{0: {'name': 'NUMBER', 'pattern': {'value': '(?:(?:\\+|\\-))?(?:[0-9])+', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 1: {'name': 'WS', 'pattern': {'value': '(?:[ \t\x0c\r\n])+', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 2: {'name': 'DOT', 'pattern': {'value': '.', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 3: {'name': 'QMARK', 'pattern': {'value': '?', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 4: {'name': 'BANG', 'pattern': {'value': '!', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 5: {'name': 'AT', 'pattern': {'value': '@', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 6: {'name': 'COMMA', 'pattern': {'value': ',', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 7: {'name': 'LPAR', 'pattern': {'value': '(', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 8: {'name': 'RPAR', 'pattern': {'value': ')', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 9: {'name': 'LESSTHAN', 'pattern': {'value': '<', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 10: {'name': 'MORETHAN', 'pattern': {'value': '>', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 11: {'name': '__ANON_0', 'pattern': {'value': '-->', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 12: {'name': '__ANON_1', 'pattern': {'value': '<->', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 13: {'name': '__ANON_2', 'pattern': {'value': '{--', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 14: {'name': '__ANON_3', 'pattern': {'value': '--]', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 15: {'name': '__ANON_4', 'pattern': {'value': '{-]', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 16: {'name': '__ANON_5', 'pattern': {'value': '==>', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 17: {'name': '__ANON_6', 'pattern': {'value': '=/>', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 18: {'name': '__ANON_7', 'pattern': {'value': '=|>', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 19: {'name': '__ANON_8', 'pattern': {'value': '=\\>', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 20: {'name': '__ANON_9', 'pattern': {'value': '<=>', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 21: {'name': '__ANON_10', 'pattern': {'value': '</>', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 22: {'name': '__ANON_11', 'pattern': {'value': '<|>', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 23: {'name': 'CIRCUMFLEX', 'pattern': {'value': '^', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 24: {'name': 'PLUS', 'pattern': {'value': '+', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 25: {'name': 'RSQB', 'pattern': {'value': ']', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 26: {'name': 'RBRACE', 'pattern': {'value': '}', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 27: {'name': 'STAR', 'pattern': {'value': '*', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 28: {'name': '__ANON_12', 'pattern': {'value': '||', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 29: {'name': '__ANON_13', 'pattern': {'value': '&&', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 30: {'name': '__ANON_14', 'pattern': {'value': '&/', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 31: {'name': '__ANON_15', 'pattern': {'value': '&|', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 32: {'name': 'VBAR', 'pattern': {'value': '|', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 33: {'name': 'AMPERSAND', 'pattern': {'value': '&', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 34: {'name': 'MINUS', 'pattern': {'value': '-', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 35: {'name': 'TILDE', 'pattern': {'value': '~', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 36: {'name': 'LSQB', 'pattern': {'value': '[', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 37: {'name': 'LBRACE', 'pattern': {'value': '{', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 38: {'name': '__ANON_16', 'pattern': {'value': '--', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 39: {'name': 'BACKSLASH', 'pattern': {'value': '\\', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 40: {'name': 'SLASH', 'pattern': {'value': '/', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 41: {'name': 'DOLLAR', 'pattern': {'value': '$', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 42: {'name': 'HASH', 'pattern': {'value': '#', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 43: {'name': '__ANON_17', 'pattern': {'value': ':!', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 44: {'name': 'COLON', 'pattern': {'value': ':', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 45: {'name': '__ANON_18', 'pattern': {'value': ':/:', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 46: {'name': '__ANON_19', 'pattern': {'value': ':|:', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 47: {'name': '__ANON_20', 'pattern': {'value': ':\\:', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 48: {'name': 'SEMICOLON', 'pattern': {'value': ';', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 49: {'name': 'PERCENT', 'pattern': {'value': '%', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 50: {'name': '__ANON_21', 'pattern': {'value': '([0]?\\.[0-9]+|1\\.[0]*|1|0)', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 51: {'name': '__ANON_22', 'pattern': {'value': '[0]?\\.[0]*[1-9]{1}[0-9]*', 'flags': [], '_width': [2, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 52: {'name': '__ANON_23', 'pattern': {'value': '[1-9]{1}[0-9]*', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 53: {'name': '__ANON_24', 'pattern': {'value': '"[^"]+"', 'flags': [], '_width': [3, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 54: {'name': '__ANON_25', 'pattern': {'value': '[^\\-^\\+^<^>^=^"^&^|^!^.^?^@^~^%^;^\\,^:^\\/^\\\\^*^#^$^\\[^\\]^\\{^\\}^\\(^\\)^\\ ]+', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 55: {'origin': {'name': 'start', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'task', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 56: {'origin': {'name': 'task', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'budget', '__type__': 'NonTerminal'}, {'name': 'sentence', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 57: {'origin': {'name': 'task', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'sentence', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [True, False], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 58: {'origin': {'name': 'sentence', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'term_nonvar', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'tense', '__type__': 'NonTerminal'}, {'name': 'truth', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'judgement', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': 0, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 59: {'origin': {'name': 'sentence', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'term_nonvar', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'tense', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'judgement', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': 0, 'template_source': None, 'empty_indices': [False, False, False, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 60: {'origin': {'name': 'sentence', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'term_nonvar', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'truth', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'judgement', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': 0, 'template_source': None, 'empty_indices': [False, False, True, False], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 61: {'origin': {'name': 'sentence', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'term_nonvar', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'judgement', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': 0, 'template_source': None, 'empty_indices': [False, False, True, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 62: {'origin': {'name': 'sentence', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'statement', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'tense', '__type__': 'NonTerminal'}, {'name': 'truth', '__type__': 'NonTerminal'}], 'order': 4, 'alias': 'judgement', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': 0, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 63: {'origin': {'name': 'sentence', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'statement', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'tense', '__type__': 'NonTerminal'}], 'order': 5, 'alias': 'judgement', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': 0, 'template_source': None, 'empty_indices': [False, False, False, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 64: {'origin': {'name': 'sentence', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'statement', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'truth', '__type__': 'NonTerminal'}], 'order': 6, 'alias': 'judgement', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': 0, 'template_source': None, 'empty_indices': [False, False, True, False], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 65: {'origin': {'name': 'sentence', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'statement', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}], 'order': 7, 'alias': 'judgement', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': 0, 'template_source': None, 'empty_indices': [False, False, True, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 66: {'origin': {'name': 'sentence', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'term_nonvar', '__type__': 'NonTerminal'}, {'name': 'QMARK', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'tense', '__type__': 'NonTerminal'}], 'order': 8, 'alias': 'question', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': 0, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 67: {'origin': {'name': 'sentence', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'term_nonvar', '__type__': 'NonTerminal'}, {'name': 'QMARK', 'filter_out': True, '__type__': 'Terminal'}], 'order': 9, 'alias': 'question', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': 0, 'template_source': None, 'empty_indices': [False, False, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 68: {'origin': {'name': 'sentence', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'statement', '__type__': 'NonTerminal'}, {'name': 'QMARK', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'tense', '__type__': 'NonTerminal'}], 'order': 10, 'alias': 'question', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': 0, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 69: {'origin': {'name': 'sentence', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'statement', '__type__': 'NonTerminal'}, {'name': 'QMARK', 'filter_out': True, '__type__': 'Terminal'}], 'order': 11, 'alias': 'question', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': 0, 'template_source': None, 'empty_indices': [False, False, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 70: {'origin': {'name': 'sentence', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'term_nonvar', '__type__': 'NonTerminal'}, {'name': 'BANG', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'tense', '__type__': 'NonTerminal'}, {'name': 'desire', '__type__': 'NonTerminal'}], 'order': 12, 'alias': 'goal', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': 0, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 71: {'origin': {'name': 'sentence', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'term_nonvar', '__type__': 'NonTerminal'}, {'name': 'BANG', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'tense', '__type__': 'NonTerminal'}], 'order': 13, 'alias': 'goal', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': 0, 'template_source': None, 'empty_indices': [False, False, False, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 72: {'origin': {'name': 'sentence', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'term_nonvar', '__type__': 'NonTerminal'}, {'name': 'BANG', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'desire', '__type__': 'NonTerminal'}], 'order': 14, 'alias': 'goal', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': 0, 'template_source': None, 'empty_indices': [False, False, True, False], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 73: {'origin': {'name': 'sentence', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'term_nonvar', '__type__': 'NonTerminal'}, {'name': 'BANG', 'filter_out': True, '__type__': 'Terminal'}], 'order': 15, 'alias': 'goal', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': 0, 'template_source': None, 'empty_indices': [False, False, True, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 74: {'origin': {'name': 'sentence', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'statement', '__type__': 'NonTerminal'}, {'name': 'BANG', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'tense', '__type__': 'NonTerminal'}, {'name': 'desire', '__type__': 'NonTerminal'}], 'order': 16, 'alias': 'goal', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': 0, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 75: {'origin': {'name': 'sentence', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'statement', '__type__': 'NonTerminal'}, {'name': 'BANG', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'tense', '__type__': 'NonTerminal'}], 'order': 17, 'alias': 'goal', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': 0, 'template_source': None, 'empty_indices': [False, False, False, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 76: {'origin': {'name': 'sentence', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'statement', '__type__': 'NonTerminal'}, {'name': 'BANG', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'desire', '__type__': 'NonTerminal'}], 'order': 18, 'alias': 'goal', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': 0, 'template_source': None, 'empty_indices': [False, False, True, False], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 77: {'origin': {'name': 'sentence', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'statement', '__type__': 'NonTerminal'}, {'name': 'BANG', 'filter_out': True, '__type__': 'Terminal'}], 'order': 19, 'alias': 'goal', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': 0, 'template_source': None, 'empty_indices': [False, False, True, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 78: {'origin': {'name': 'sentence', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'term_nonvar', '__type__': 'NonTerminal'}, {'name': 'AT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'tense', '__type__': 'NonTerminal'}], 'order': 20, 'alias': 'quest', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': 0, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 79: {'origin': {'name': 'sentence', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'term_nonvar', '__type__': 'NonTerminal'}, {'name': 'AT', 'filter_out': True, '__type__': 'Terminal'}], 'order': 21, 'alias': 'quest', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': 0, 'template_source': None, 'empty_indices': [False, False, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 80: {'origin': {'name': 'sentence', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'statement', '__type__': 'NonTerminal'}, {'name': 'AT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'tense', '__type__': 'NonTerminal'}], 'order': 22, 'alias': 'quest', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': 0, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 81: {'origin': {'name': 'sentence', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'statement', '__type__': 'NonTerminal'}, {'name': 'AT', 'filter_out': True, '__type__': 'Terminal'}], 'order': 23, 'alias': 'quest', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': 0, 'template_source': None, 'empty_indices': [False, False, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 82: {'origin': {'name': 'statement', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LESSTHAN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'copula', '__type__': 'NonTerminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'MORETHAN', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': 0, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 83: {'origin': {'name': 'statement', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'copula', '__type__': 'NonTerminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': 0, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 84: {'origin': {'name': 'statement', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'op', '__type__': 'NonTerminal'}, {'name': '__statement_star_0', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': 'statement_operation1', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': 0, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 85: {'origin': {'name': 'statement', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'op', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'statement_operation1', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': 0, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 86: {'origin': {'name': 'statement', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'word', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': '__statement_star_0', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': 'statement_operation2', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': 0, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 87: {'origin': {'name': 'statement', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'word', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': 'statement_operation2', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': 0, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 88: {'origin': {'name': 'copula', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_0', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': 'inheritance', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 89: {'origin': {'name': 'copula', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_1', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'similarity', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 90: {'origin': {'name': 'copula', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_2', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': 'instance', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 91: {'origin': {'name': 'copula', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'property', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 92: {'origin': {'name': 'copula', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_4', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': 'instance_property', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 93: {'origin': {'name': 'copula', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_5', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': 'implication', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 94: {'origin': {'name': 'copula', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_6', 'filter_out': True, '__type__': 'Terminal'}], 'order': 6, 'alias': 'predictive_implication', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 95: {'origin': {'name': 'copula', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_7', 'filter_out': True, '__type__': 'Terminal'}], 'order': 7, 'alias': 'concurrent_implication', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 96: {'origin': {'name': 'copula', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_8', 'filter_out': True, '__type__': 'Terminal'}], 'order': 8, 'alias': 'retrospective_implication', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 97: {'origin': {'name': 'copula', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_9', 'filter_out': True, '__type__': 'Terminal'}], 'order': 9, 'alias': 'equivalence', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 98: {'origin': {'name': 'copula', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_10', 'filter_out': True, '__type__': 'Terminal'}], 'order': 10, 'alias': 'predictive_equivalence', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 99: {'origin': {'name': 'copula', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_11', 'filter_out': True, '__type__': 'Terminal'}], 'order': 11, 'alias': 'concurrent_equivalence', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 100: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'variable', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'variable_term', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 101: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'term_nonvar', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 102: {'origin': {'name': 'term_nonvar', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'interval', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 103: {'origin': {'name': 'term_nonvar', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'word', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'atom_term', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 104: {'origin': {'name': 'term_nonvar', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'compound_term', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'compound_term', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 105: {'origin': {'name': 'term_nonvar', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'statement', '__type__': 'NonTerminal'}], 'order': 3, 'alias': 'statement_term', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 106: {'origin': {'name': 'term_nonvar', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'op', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 107: {'origin': {'name': 'op', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CIRCUMFLEX', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'word', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 108: {'origin': {'name': 'interval', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'NUMBER', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 109: {'origin': {'name': 'compound_term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'set', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 110: {'origin': {'name': 'compound_term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'multi', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 111: {'origin': {'name': 'compound_term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'single', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 112: {'origin': {'name': 'compound_term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ext_image', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 113: {'origin': {'name': 'compound_term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'int_image', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 114: {'origin': {'name': 'compound_term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'negation', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 115: {'origin': {'name': 'set', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'int_set', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 116: {'origin': {'name': 'set', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ext_set', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 117: {'origin': {'name': 'int_set', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'con_int_set', '__type__': 'NonTerminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': '__statement_star_0', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': 'set', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 118: {'origin': {'name': 'int_set', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'con_int_set', '__type__': 'NonTerminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'set', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 119: {'origin': {'name': 'ext_set', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'con_ext_set', '__type__': 'NonTerminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': '__statement_star_0', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': 'set', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 120: {'origin': {'name': 'ext_set', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'con_ext_set', '__type__': 'NonTerminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'set', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 121: {'origin': {'name': 'negation', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'con_negation', '__type__': 'NonTerminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 122: {'origin': {'name': 'negation', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'con_negation', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 123: {'origin': {'name': 'int_image', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'con_int_image', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': '__statement_star_0', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 124: {'origin': {'name': 'int_image', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'con_int_image', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 125: {'origin': {'name': 'ext_image', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'con_ext_image', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': '__statement_star_0', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 126: {'origin': {'name': 'ext_image', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'con_ext_image', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 127: {'origin': {'name': 'multi', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'con_multi', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': '__statement_star_0', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': 'multi_prefix', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 128: {'origin': {'name': 'multi', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'multi_infix_expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 129: {'origin': {'name': 'multi', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': '__statement_star_0', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': 'multi_prefix_product', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 130: {'origin': {'name': 'multi', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'con_product', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': '__statement_star_0', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'multi_prefix', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 131: {'origin': {'name': 'multi', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'con_product', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': 'multi_prefix', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 132: {'origin': {'name': 'single', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'con_single', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': 'single_prefix', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 133: {'origin': {'name': 'single', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'con_single', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'multi_infix_expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'single_prefix', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 134: {'origin': {'name': 'single', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'con_single', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'multi_infix_expr', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': 'single_prefix', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 135: {'origin': {'name': 'single', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'con_single', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'multi_infix_expr', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'multi_infix_expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'single_prefix', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 136: {'origin': {'name': 'single', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'con_single', '__type__': 'NonTerminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': 'single_infix', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 137: {'origin': {'name': 'single', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'con_single', '__type__': 'NonTerminal'}, {'name': 'multi_infix_expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': 'single_infix', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 138: {'origin': {'name': 'single', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'multi_infix_expr', '__type__': 'NonTerminal'}, {'name': 'con_single', '__type__': 'NonTerminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 6, 'alias': 'single_infix', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 139: {'origin': {'name': 'single', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'multi_infix_expr', '__type__': 'NonTerminal'}, {'name': 'con_single', '__type__': 'NonTerminal'}, {'name': 'multi_infix_expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 7, 'alias': 'single_infix', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 140: {'origin': {'name': 'multi_infix_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'multi_extint_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 141: {'origin': {'name': 'multi_infix_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'multi_intint_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 142: {'origin': {'name': 'multi_infix_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'multi_parallel_expr', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 143: {'origin': {'name': 'multi_infix_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'multi_sequential_expr', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 144: {'origin': {'name': 'multi_infix_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'multi_conj_expr', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 145: {'origin': {'name': 'multi_infix_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'multi_disj_expr', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 146: {'origin': {'name': 'multi_infix_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'multi_prod_expr', '__type__': 'NonTerminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 147: {'origin': {'name': 'multi_prod_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'term6', '__type__': 'NonTerminal'}, {'name': '__multi_prod_expr_plus_1', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 148: {'origin': {'name': 'term6', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'term5', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 149: {'origin': {'name': 'term6', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'multi_disj_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 150: {'origin': {'name': 'multi_disj_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'term5', '__type__': 'NonTerminal'}, {'name': '__multi_disj_expr_plus_2', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 151: {'origin': {'name': 'term5', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'term4', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 152: {'origin': {'name': 'term5', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'multi_conj_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 153: {'origin': {'name': 'multi_conj_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'term4', '__type__': 'NonTerminal'}, {'name': '__multi_conj_expr_plus_3', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 154: {'origin': {'name': 'term4', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'term3', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 155: {'origin': {'name': 'term4', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'multi_sequential_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 156: {'origin': {'name': 'multi_sequential_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'term3', '__type__': 'NonTerminal'}, {'name': '__multi_sequential_expr_plus_4', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 157: {'origin': {'name': 'term3', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'term2', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 158: {'origin': {'name': 'term3', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'multi_parallel_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 159: {'origin': {'name': 'multi_parallel_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'term2', '__type__': 'NonTerminal'}, {'name': '__multi_parallel_expr_plus_5', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 160: {'origin': {'name': 'term2', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'term1', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 161: {'origin': {'name': 'term2', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'multi_intint_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 162: {'origin': {'name': 'multi_intint_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'term1', '__type__': 'NonTerminal'}, {'name': '__multi_intint_expr_plus_6', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 163: {'origin': {'name': 'term1', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'term', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 164: {'origin': {'name': 'term1', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'multi_extint_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 165: {'origin': {'name': 'multi_extint_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'term', '__type__': 'NonTerminal'}, {'name': '__multi_extint_expr_plus_7', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 166: {'origin': {'name': 'con_multi', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_13', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': 'con_conjunction', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 167: {'origin': {'name': 'con_multi', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_12', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'con_disjunction', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 168: {'origin': {'name': 'con_multi', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_15', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': 'con_parallel_events', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 169: {'origin': {'name': 'con_multi', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_14', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'con_sequential_events', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 170: {'origin': {'name': 'con_multi', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VBAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': 'con_intensional_intersection', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 171: {'origin': {'name': 'con_multi', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'AMPERSAND', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': 'con_extensional_intersection', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 172: {'origin': {'name': 'con_product', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 173: {'origin': {'name': 'con_single', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MINUS', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': 'con_extensional_difference', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 174: {'origin': {'name': 'con_single', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TILDE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'con_intensional_difference', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 175: {'origin': {'name': 'con_int_set', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 176: {'origin': {'name': 'con_ext_set', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 177: {'origin': {'name': 'con_negation', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_16', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 178: {'origin': {'name': 'con_int_image', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'BACKSLASH', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 179: {'origin': {'name': 'con_ext_image', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SLASH', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 180: {'origin': {'name': 'variable', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DOLLAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'word', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'independent_var', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': 0, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 181: {'origin': {'name': 'variable', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'word', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'dependent_var', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': 0, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 182: {'origin': {'name': 'variable', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'QMARK', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'word', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'query_var', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': 0, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 183: {'origin': {'name': 'tense', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_17', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'NUMBER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': 'tense_time', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 184: {'origin': {'name': 'tense', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_18', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'tense_future', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 185: {'origin': {'name': 'tense', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_19', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': 'tense_present', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 186: {'origin': {'name': 'tense', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_20', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'tense_past', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 187: {'origin': {'name': 'desire', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'truth', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 188: {'origin': {'name': 'truth', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'PERCENT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'frequency', '__type__': 'NonTerminal'}, {'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'confidence', '__type__': 'NonTerminal'}, {'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'k_evidence', '__type__': 'NonTerminal'}, {'name': 'PERCENT', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 189: {'origin': {'name': 'truth', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'PERCENT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'frequency', '__type__': 'NonTerminal'}, {'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'confidence', '__type__': 'NonTerminal'}, {'name': 'PERCENT', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, False, False, False, True, False], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 190: {'origin': {'name': 'truth', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'PERCENT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'frequency', '__type__': 'NonTerminal'}, {'name': 'PERCENT', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, False, True, False], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 191: {'origin': {'name': 'budget', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DOLLAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'priority', '__type__': 'NonTerminal'}, {'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'durability', '__type__': 'NonTerminal'}, {'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'quality', '__type__': 'NonTerminal'}, {'name': 'DOLLAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': 2, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 192: {'origin': {'name': 'budget', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DOLLAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'priority', '__type__': 'NonTerminal'}, {'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'durability', '__type__': 'NonTerminal'}, {'name': 'DOLLAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': 2, 'template_source': None, 'empty_indices': [False, False, False, False, True, False], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 193: {'origin': {'name': 'budget', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DOLLAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'priority', '__type__': 'NonTerminal'}, {'name': 'DOLLAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': 2, 'template_source': None, 'empty_indices': [False, False, True, False], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 194: {'origin': {'name': 'word', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'string_raw', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 195: {'origin': {'name': 'word', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'string', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 196: {'origin': {'name': 'priority', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_21', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 197: {'origin': {'name': 'durability', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_22', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 198: {'origin': {'name': 'quality', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_21', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 199: {'origin': {'name': 'frequency', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_21', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 200: {'origin': {'name': 'confidence', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_22', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 201: {'origin': {'name': 'k_evidence', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_23', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 202: {'origin': {'name': 'string', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_24', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 203: {'origin': {'name': 'string_raw', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_25', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 204: {'origin': {'name': '__statement_star_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 205: {'origin': {'name': '__statement_star_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__statement_star_0', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 206: {'origin': {'name': '__multi_prod_expr_plus_1', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term6', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 207: {'origin': {'name': '__multi_prod_expr_plus_1', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__multi_prod_expr_plus_1', '__type__': 'NonTerminal'}, {'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term6', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 208: {'origin': {'name': '__multi_disj_expr_plus_2', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_12', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term5', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 209: {'origin': {'name': '__multi_disj_expr_plus_2', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__multi_disj_expr_plus_2', '__type__': 'NonTerminal'}, {'name': '__ANON_12', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term5', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 210: {'origin': {'name': '__multi_conj_expr_plus_3', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_13', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term4', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 211: {'origin': {'name': '__multi_conj_expr_plus_3', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__multi_conj_expr_plus_3', '__type__': 'NonTerminal'}, {'name': '__ANON_13', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term4', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 212: {'origin': {'name': '__multi_sequential_expr_plus_4', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_14', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term3', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 213: {'origin': {'name': '__multi_sequential_expr_plus_4', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__multi_sequential_expr_plus_4', '__type__': 'NonTerminal'}, {'name': '__ANON_14', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term3', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 214: {'origin': {'name': '__multi_parallel_expr_plus_5', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_15', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term2', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 215: {'origin': {'name': '__multi_parallel_expr_plus_5', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__multi_parallel_expr_plus_5', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term2', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 216: {'origin': {'name': '__multi_intint_expr_plus_6', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VBAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term1', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 217: {'origin': {'name': '__multi_intint_expr_plus_6', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__multi_intint_expr_plus_6', '__type__': 'NonTerminal'}, {'name': 'VBAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term1', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 218: {'origin': {'name': '__multi_extint_expr_plus_7', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'AMPERSAND', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 219: {'origin': {'name': '__multi_extint_expr_plus_7', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__multi_extint_expr_plus_7', '__type__': 'NonTerminal'}, {'name': 'AMPERSAND', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}}
)
Shift = 0
Reduce = 1
def Lark_StandAlone(**kwargs):
  return Lark._load_from_dict(DATA, MEMO, **kwargs)
