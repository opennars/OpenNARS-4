from .branch_list import BranchList as BranchList, Node as Node
from typing import Tuple, Union

class SparseLUT:
    shape: Tuple[int]
    depth: int
    blist: BranchList
    lut: dict
    data: list
    def __init__(self, shape: tuple) -> None: ...
    def add(self, indices: Union[list, tuple], value): ...
    def build(self, clear: bool = ...) -> None: ...
    def clear(self) -> None: ...
    def dump(self, root_path: str, name_cache: str = ...): ...
    def load(self, root_path: str, name_cache: str = ...): ...
    def draw(self, show_labels: bool = ...) -> None: ...
    def __setitem__(self, indices: tuple, value): ...
    def get(self, indices: tuple): ...
    def __getitem__(self, indices: tuple): ...
    def __len__(self): ...
