import os 
from pathlib import Path
from inspect import getmembers, isfunction
import importlib
import re


name_modules = [
    'Inference', 'Theorems'
]
for name_module in name_modules:
    root_path = Path(__file__).parent/name_module
    this_name = Path(__file__).name
    module_names = [path for path in root_path.glob('*') if not ('__init__.py' in str(path) or this_name in str(path) or '__' in str(path))]

    try:
        os.remove(root_path/'__init__.py')
    except:
        pass
    content = "'''This file is generated by `_generate_init_file.py`'''\n\n\n"
    for path in module_names:
        module = importlib.import_module(f'opennars.NAL.{name_module}.{path.stem}')
        funcs = [mem[0] for mem in getmembers(module, isfunction)
            if mem[1].__module__ == module.__name__]
        if len(funcs) == 0: continue
        temp = ""
        temp += f"from .{path.stem} import \\\n"
        for i, func in enumerate(funcs):
            temp += f"\t{func} as {re.findall('[A-Z][^A-Z]*', path.name)[0].lower()}__{func}"
            if i < len(funcs)-1:
                temp += ", \\\n"
            else:
                temp += " \n\n"
        content += temp

    with open(root_path/'__init__.py', 'w') as f:
        f.write(content)

print('done.')
